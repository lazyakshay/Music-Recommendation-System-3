(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n#default homepage redirected to home\nauth.settings.create_user_groups = False\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalizatioREADMEn operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(r=request,f=\'home\'))\n    return dict(message=T(\'Hello World\'))\n\n#function for user login/logout\ndef user():\n        \n    if request.args(0)==\'logout\':\n        ip=0;\n        down=0;\n        for i in db(db.ip_add.ip==str(request.env.remote_addr)).select():\n            ip=i.id\n            down=i.hits+1   \n        if ip:  db(db.ip_add.id==ip).update(hits=down,last=request.now,port=request.env.remote_port)\n        else:  db.ip_add.insert(ip=str(request.env.remote_addr),hits=0,last=request.now,port=request.env.remote_port)\n        session.clear()     #if requestfor logout clear the session\n        redirect(URL(r=request,f=\'user\',args=\'login\'))#redirect to login page\n    \n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))         #contains details of top download\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))       #contains details of recently uploaded files\n    return dict(form=auth(),down=down,recent=recent)\n\n#the logout function\ndef logout():\n    session.clear()\n    redirect(URL(r=request,f=\'index\'))\n    return \n\n\n#the page to register\ndef register():\n    session.clear()\n    form=SQLFORM(db.auth_user)\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        \n    if form.accepts(request.vars,session):\n            redirect(URL(r=request,f=\'user\',args=\'login\'))#if registeration is sucessful  redirct to homepage\n            \n    return dict(form=form,down=down,recent=recent)\n\n#default function to download the filea in database\n@auth.requires_login()\ndef download():\n     \n    if(request.vars.has_key(\'songid\')):  #if it is called to download the no of download of that song is increased by one\n        rat1=db(db.plugin_rating_master.id>0).select()\n        rat=3.0\n        for i in rat1:\n            rat=i.rating\n        so=int(request.vars[\'songid\'])\n        curr=db(db.song.id==so).select()\n        down=0\n        rat1=3.0\n        for i in curr:\n             down=int(i.nod)+1\n             rat1=i.rating\n        rat=((rat1*(down-1))+rat)/down\n        db(db.song.id==so).update(nod=down,rating=rat)\n        \n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n#controller for homepage\n\n#@auth.requires_membership(\'administration\')\n\n\n@auth.requires_login()\ndef home():\n    admin=0\n    admin_privelege = False\n    if(session.auth.user.admin_priv == True):\n        admin_privilege = True \n    \n    if(auth.has_membership(\'adminstration\')):admin=1\n        \n    form = SQLFORM.factory(\n            Field(\'Search\'),\n            Field(\'type\',\'boolean\', requires=IS_IN_SET([\'All\',\'Artist\',\'Album\',\'Titles\']),widget=SQLFORM.widgets.radio.widget,default=\'All\'))\n    g=[]\n     \n    if session.string==None:\n          session.string=" "\n          session.type1="All"\n    string=session.string\n    type1=session.type1\n    pageno=0\n    next=0\n    pre=0\n    no=15\n        \n        \n    if request.vars.has_key(\'pageno\'):\n          pageno=int(request.vars[\'pageno\'])\n          no=pageno*15+15\n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'Search\']\n          session.type1=request.vars[\'type\']\n          redirect(URL(r=request,f=\'home\'))\n    elif form.errors:\n          response.flash = \'form has errors\'\n       \n    g=process_search(string,type1)\n    count=len(g)\n       \n    found=""\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    tmp=db(db.song.id>0).select()\n    if(g):\n          found=tmp.find(lambda x: x.id in g)\n    else: response.flash=\'no song found\'\n             \n    if pageno>0:\n          pre=1\n    if no <count:\n          next=1\n    session.string=string\n    session.type1=type1 \n    return dict(admin=admin,form=form,found=found,pageno=pageno,pre=pre,next=next,count=count,down=down,recent=recent)\n    \nimport os\n@auth.requires_membership(\'adminstration\')\ndef ips():\n    ip12=db(db.ip_add.id>0).select()\n    return dict(ip=ip12)\n    \nimport re\n#function that process the search string and returns the ids of mathched results\n@auth.requires_login()\ndef process_search(s1,p):\n    s=\'\\w*\\s*\\W*\'\n    reg=s\n    for i in s1.split():\n        reg=reg+i+s         #create a regular expression\n    l=[]\n    #search for the regx in database\n    for i in db(db.song.id>0).select(db.song.ALL):\n        tmp=i.id\n       \n        if((p==\'All\' or p==\'Album\')and (re.search(reg,i.album,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Titles\')and (re.search(reg,i.name,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Artist\')and (re.search(reg,i.artist,re.IGNORECASE))):\n           if(i.id not in l):l+=[i.id]   \n         \n    \n    return l\n \nimport os\n\n#controler for upload page\n@auth.requires(auth.user_id.admin_priv == True)\ndef upload():\n    up_form=SQLFORM(db.files)\n    bol =\'dskh\' \n \n    if up_form.accepts(request.vars,session):\n            response.flash=(T(\'file uploaded\'))\n            path = os.path.join(request.folder,\'uploads\',up_form.vars[\'file\'])\n            bol=get_info(path,up_form.vars[\'id\'])   #get the metadata of uploaded file\n            if(bol[\'done\']==True):\n                 bol=bol[\'m\']\n                 #insert the metadata in database\n                 db.song.insert(file=up_form.vars[\'id\'],name=bol[\'title\'][0],doup=request.now,lyrics=bol[\'lyrics\'],length=bol[\'length\'],btr=bol[\'bit_rate\'], artist=bol[\'artist\'][0], album=bol[\'album\'][0], year=int(bol[\'date\']),genere=bol[\'genere\'][0],user_id=session.auth.user.id,pic=bol[\'img\'])\n                         \n            else:db(db.file.id==up_form.vars[\'id\']).delete()#if there is error in extracting metadata delete the file\n    elif up_form.errors:\n           response.flash=(T(\'error occured\'))\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n    return dict(form=up_form,down=down,recent=recent,byme=byme)    \n\n\n#controller  for mymusic page\n@auth.requires_login()\ndef mymusic():\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))#contains details of recently  uploadded files\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n        \n        pageno=0\n        next=0\n        pre=0\n        no=15\n        n=15\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])\n            no=pageno*15+15                             #get the current page no\n        count=db(db.song.user_id==session.auth.user.id).count() #get the total no of entries\n         \n        if pageno > 0:\n            pre=1\n        if no < count:\n            next=1\n        else :\n            no-=15\n            n=count-no \n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(pageno*15,n))#contains details of top songs uploaded by user\n        return dict(pageno=pageno,pre=pre,next=next,down=down,recent=recent,byme=byme)\nimport os\n\n#controller forhandle playlist page\n@auth.requires_login()\ndef playlist():    \n        pageno=0\n        next=0\n        pre=0\n        no=11\n        n=11\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])      #get the current page no\n            if pageno < 0 : redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))\n            no=pageno*11+11\n        \n        byme=db(db.playlist.user==session.auth.user.id).select()#contains details of top songs uploaded by user\n        \n        iid=0  \n        \n          \n        li=[]\n        for i in byme:\n            li+=[i.id]\n        if len(li)>0: iid=li[0]\n        \n                \n        if request.vars.has_key(\'id\'):\n            iid=int(request.vars[\'id\'])    \n            \n        if len(li)>0 and iid not in li: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        \n        count=db(db.playlist.user==session.auth.user.id).count()#get the total no of entries\n        \n        if pageno*11 > count: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        elif pageno*11==count and pageno >0:redirect(URL(r=request,f=\'playlist\',c=\'default\',vars=dict(pageno=pageno-1)))#redirect to previouspage\n      \n        song=db((db.list.list==iid)&(db.list.song==db.song.id)&(db.song.file==db.files.id)).select()  #order by orders\n        pname=""\n        for i in db(db.playlist.id==iid).select():\n             pname=i.name\n        #create the playlist .xfps file\n        str1=\'\xef\xbb\xbf<?xml version="1.0" encoding="UTF-8" ?> \\n<playlist version="0" xmlns="http://xspf.org/ns/0/">\\n <title>\'\n        str2=\'\'\' \n         </title>\n         <trackList>\'\'\'\n        str3=\'\'\'<track>\n          <location>\'\'\'\n\n        str4=\'\'\'</location>\n            <image>\'\'\'\n        str5=\'\'\'</image>\n        <annotation>\'\'\'\n        str6=\'\'\'</annotation>\n            </track>\'\'\'\n        str7=\'\'\'</trackList>\n            </playlist>\'\'\'\n        if len(li)>0 :\n            plist=file(os.path.join(request.folder,\'static\',(\'tmp\'+\'.xspf\')),\'w\')\n            plist.write(str1)\n            plist.write(pname)\n            plist.write(str2)\n        \n            for i in song:\n               plist.write(str3)\n               plist.write(str(URL(r=request,f=\'download\',c=\'default\',args=i.files.file)))\n               plist.write(str4)\n               plist.write(str(URL(request.application,\'static\',i.song.pic)))\n               plist.write(str5)\n               plist.write(i.song.name)\n               plist.write(str6)\n               #response.flash=song\n            plist.write(str7)        \n            plist.close()\n            #the playlist is created\n            \n        if pageno>0:\n            pre=1\n        if no <count:\n            next=1\n        else :\n            no-=11\n            n=count-no\n            \n        form = SQLFORM.factory(Field(\'new\',\'string\',label="NEW PLAYLIST"))#form to insert new playlist\n            \n        if form.accepts(request.vars,session):\n            response.flash=\'New Playlist created\'\n            db.playlist.insert(user=session.auth.user.id,name=form.vars[\'new\'])\n            redirect(URL(r=request,f=\'playlist\',vars=dict(pageno=pageno)))\n        elif form.errors:\n                response.flash=\'error\'\n        \n                    \n        byme=db(db.playlist.user==session.auth.user.id).select(limitby=(pageno*11,n))#contains details of top songs uploaded by user\n        scr1=" " \n        if len(li)>0:   \n            scr1=URL(request.application,\'static\',\'tmp\'+\'.xspf\')\n        scr2=URL(request.application,\'static\',os.path.join(\'ply\',\'xspf_player.swf\'))\n            \n        ply=XML(\'<object type="application/x-shockwave-flash" width="650" height="600" data="%(scr2)s?playlist_url=%(scr1)s">  <param name="movie"  value="%(scr2)s?autoplay=1&autoload=1&playlist_url=%(scr1)s"/> <embed  allowfullscreen="false" allowscriptaccess="always" src="%(scr2)s?playlist_url=%(scr1)s pluginspage=\xe2\x80\x9dhttp://www.macromedia.com/go/getflashplayer\xe2\x80\x9d" ></embed> </object>\'%dict(scr1=scr1,scr2=scr2))#the XML lines for player\n       \n        \n            \n        return dict(form=form,ply=ply,pageno=pageno,pre=pre,next=next,byme=byme,pname=pname)\n    \n#the controller for play song page\n@auth.requires_login()\ndef play():\n    \n        so=int(request.args(0))\n        som1=db(db.song.id==so).select()\n        if (db(db.song.id==so).count())<=0:\n            redirect(URL(r=request,f=\'user\',args=\'logout\'))#call for logout if vars not in range\n        \n        soid=0\n        for i in som1:\n          soid=i.file\n          sopic=i.pic\n          sonam=i.name\n        som=db(db.files.id==soid).select()\n        filn=""\n        for i in som:\n            filn=i.file\n        #create form for comment\n        form = SQLFORM.factory(Field(\'comment\',\'text\'))\n        \n        db.list.song.default=so\n        db.list.song.readable=False\n        db.list.favourite.readable=False\n        db.list.listen.readable=False\n        db.list.orders.readable=False\n        db.list.song.writable=False\n        db.list.favourite.writable=False\n        db.list.listen.writable=False\n        db.list.orders.writable=False\n        \n        myplaylist=[]\n        idform=[]\n        for i in db((db.playlist.user==session.auth.user.id)).select():\n              myplaylist+=[i.name]\n              idform+=[i.id]\n        \n   \n        db.list.list.requires=IS_IN_SET(idform,myplaylist)\n        form1=SQLFORM(db.list)\n        response.flash=sonam\n        if form1.accepts(request.vars,session):\n            response.flash="SONG ADDED TO PLAYLIST"\n        if form.accepts(request.vars,session):\n            response.flash=\'comment added\'\n            db.comments.insert(user_id=session.auth.user.id,song_id=so,comment=form.vars[\'comment\'],date=request.now)\n            \n             \n        sopic=URL(request.application,\'static\',sopic)#the album art pic\n        pic=XML(\'<img src=%(sopic)s align="center"  width="240px" height="240"\\>\'% dict(sopic=sopic)) \n        src=URL(r=request,c=\'default\',f=\'download\',args=filn)\n        width=\'400\'\n        height=45\n        """\n        ## Embeds a media file (such as flash video or an mp3 file)\n        - ``src`` is the src of the video\n        - ``width`` is the width of the image\n        - ``height`` is the height of the image\n        """\n        #the music player\n        ply=XML(\'<embed allowfullscreen="false" allowscriptaccess="always" flashvars="height=%(height)s&width=%(width)s&file=%(src)s" height="%(height)spx" src="%(url)s" width="%(width)spx"></embed>\'%dict(url=URL(request.application,\'static\',\'plugin_wiki/mediaplayer.swf\'),src=src,width=width,height=height))\n        \n        #select the comment for the song\n        comm=db((db.comments.song_id==so) &( db.comments.user_id==db.auth_user.id)).select(db.auth_user.first_name,db.auth_user.last_name,db.comments.comment,db.comments.date,db.auth_user.pic,db.auth_user.id,db.comments.id,orderby=~db.comments.date,limitby=(0,10))\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15))\n        \n        return dict(ply=ply,down=down,recent=recent,byme=byme,comm=comm,form=form,pic=pic,som=som1,ffff=filn,form1=form1)   \n\n#contrller for the deleteplaylist function\n@auth.requires_login()        \ndef deletplaylist():\n    playl=int(request.vars[\'id\'])\n    pag=int(request.vars[\'pageno\'])\n    db(db.list.list==playl).delete()\n    db(db.playlist.id==playl).delete()\n    redirect(URL(r=request, f=\'playlist\',vars=dict(pageno=pag)))\n    return\n\n#contrller for the deletecomment function\n@auth.requires_login()\ndef deletcomment():\n    song=int(request.vars[\'song\'])\n    com=int(request.vars[\'com\'])\n    db(db.comments.id==com).delete()\n    redirect(URL(r=request, f=\'play\',args=song))\n    return        \n\n\n@auth.requires_membership(\'adminstration\')\ndef admins():\n    names=[]\n    ids=[]\n    for i in db(db.auth_user.id>0).select():\n              ids+=[i.id]\n              names+=[i.first_name+\' \'+i.last_name]\n    for i in db((db.auth_user.id==db.auth_membership.user_id)).select():\n           k=ids.index(i.auth_user.id)\n           del(ids[k])\n           del(names[k])\n      #  response.flash="Deleting Options"\n           form2 = SQLFORM.factory(\n            Field(\'user\',requires=IS_IN_SET(ids,names),label=\'Delete User\'))\n    son=db(db.song.id>0).select()\n    sonn=[]\n    sonid=[]\n    for i in son:\n        sonid+=[i.id]\n        sonn+=[i.name+\' artist: \'+i.artist]   \n    if request.vars.has_key(\'user\'):\n       #if form2.accepts(request.vars,session):\n       if not form2.errors:\n        db(db.comments.user_id==request.vars[\'user\']).delete()\n        for i in db(db.playlist.user==request.vars[\'user\']).select():\n            db(db.list.list==i.id).delete()\n        db(db.playlist.user==request.vars[\'user\']).delete()\n        db(db.auth_user.id==request.vars[\'user\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n       elif form2.errors: pass  \n    \n    form1 = SQLFORM.factory(\n            Field(\'song\',requires=IS_IN_SET(sonid,sonn),label=\'Delete Song\'))\n    \n    if form1.accepts(request.vars, session):\n           # response.flash="qefw"\n            \n        db(db.comments.song_id==request.vars[\'song\']).delete()\n        \n        art=db(db.song.id==request.vars[\'song\']).select()\n        artpic=""\n        for i in art:\n            artpic=os.path.join(request.folder,\'static\',i.pic)\n        try:\n            os.remove(artpic)\n        except OSError:\n             response.flash="error"\n        for i in db((db.song.id==request.vars[\'song\'])&(db.files.id==db.song.file)).select():\n            db(db.files.id==i.files.id).delete()\n        db(db.song.id==request.vars[\'song\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n        \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    return dict(down=down,recent=recent,form=form2,form1=form1)\n\n\n\n\n\nfrom mutagen.mp3 import MP3\nfrom mutagen.easyid3 import EasyID3\nimport mutagen.id3\nfrom mutagen.id3 import ID3, TIT2, TALB, TPE1, TPE2, COMM, USLT, TCOM, TCON\n\nfrom mutagen.id3 import ID3NoHeaderError\nfrom mutagen.mp3 import HeaderNotFoundError\n\n#function to extract metadata from MP3 file\n@auth.requires_login()\ndef get_info(f,filen): \n    filen=str(filen)\n   \n    m={}\n    try:\n        audio = MP3(f)\n    except HeaderNotFoundError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False) \n    try:\n       tagg = ID3(f)\n    except ID3NoHeaderError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False)\n   \n    ext=\'.img\'\n    flag=1\n    imgfilename=""\n    #lookfor albumart\n    for frame in tagg.getall("APIC"):\n                flag=2\n                if (frame.mime == "image/jpeg") or (frame.mime == "image/jpg"): ext = ".jpg"\n                if frame.mime == "image/png": ext = ".png"\n                if frame.mime == "image/gif": ext = ".gif"\n\n                filen=filen+ext\n                #storethe album art\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n             \n                myfile = file(imgfilename, \'w\')\n                myfile.write(frame.data)\n                myfile.close()\n    if(flag==1):\n                filen=filen+\'.jpg\'\n                imgfilename=str(URL(request.folder,\'static\',\'albumart.jpg\'))\n                ff=file(imgfilename,\'r\')\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n                myfile = file(imgfilename, \'w\')\n                myfile.write(ff.read())\n                myfile.close()\n                ff.close()\n    m={}            \n    m = dict(MP3(f, ID3=EasyID3))\n    l=tagg.getall(u"USLT")\n    m[\'lyrics\']=""\n    if(not(m.has_key(\'artist\'))):m[\'artist\']=[\'unknown\']\n    if(not(m.has_key(\'album\'))):m[\'album\']=[\'unknown\']\n    if(not(m.has_key(\'title\'))):m[\'title\']=[\'unknown\']\n    if(not(m.has_key(\'genere\'))):m[\'genere\']=[\'unknown\']  \n    if(not(m.has_key(\'date\'))):m[u\'date\']=[\'2014\']\n    m[\'date\']=m[\'date\'][0][:4]\n    for i in tagg.getall(u"USLT"):\n         m[\'lyrics\']=i.text\n         \n    m[\'length\']=audio.info.length\n    m[\'bit_rate\']=audio.info.bitrate/(1000)\n    m[\'img\']=filen\n    \n    return dict(m=m,done=True)\n\nresponse._vars=response._caller(upload)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p26
sS'__format__'
p27
S'<built-in method __format__ of exceptions.AttributeError object>'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p30
sS'__class__'
p31
S"<type 'exceptions.AttributeError'>"
p32
sS'__unicode__'
p33
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p34
sS'__delattr__'
p35
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p36
sS'__subclasshook__'
p37
S'<built-in method __subclasshook__ of type object>'
p38
sS'__repr__'
p39
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p40
sS'args'
p41
S'("\'int\' object has no attribute \'admin_priv\'",)'
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p46
sS'__doc__'
p47
S"'Attribute not found.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"'int' object has no attribute 'admin_priv'"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'upload'"
p58
sS'body'
p59
S"<open file '<fdopen>', mode 'w+b'>"
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a..., 'PATH_INFO': '/Music_Library/default/upload'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S"<Storage {'_formkey': '22208512-a883-4867-b8b4-0...t2009Download Largest Collection \\x00\\x01\\x0c')}>"
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sS'raw_extension'
p71
S'None'
p72
sg41
S'[]'
p73
sS'controller'
p74
S"'default'"
p75
sS'cookies'
p76
S"<SimpleCookie: session_id_AOE='127.0.0.1-abb8245...'127.0.0.1-6e7e6187-9c4d-4786-8889-a54ef8a0a5e1'>"
p77
sS'application'
p78
S"'Music_Library'"
p79
sS'ajax'
p80
S'False'
p81
sS'client'
p82
S"'127.0.0.1'"
p83
sS'env'
p84
S"<Storage {'content_length': '11719769', 'http_ac...', 'path_info': '/Music_Library/default/upload'}>"
p85
sS'raw_args'
p86
S'None'
p87
sS'get_vars'
p88
S'<Storage {}>'
p89
sS'folder'
p90
S"'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/'"
p91
sS'now'
p92
S'datetime.datetime(2011, 2, 7, 16, 14, 59, 910807)'
p93
sS'post_vars'
p94
S"<Storage {'_formkey': '22208512-a883-4867-b8b4-0...t2009Download Largest Collection \\x00\\x01\\x0c')}>"
p95
ssS'frames'
p96
(lp97
(dp98
S'file'
p99
S'/home/aakarshit/Desktop/python/web2py/gluon/restricted.py'
p100
sS'dump'
p101
(dp102
S'environment'
p103
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p104
sS'ccode'
p105
S'<code object <module> at 0x8e769f8, file "/home/...s/Music_Library/controllers/default.py", line 12>'
p106
ssS'lnum'
p107
I188
sS'lines'
p108
(dp109
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p110
sI183
S'        if type(code) == types.CodeType:'
p111
sI184
S'            ccode = code'
p112
sI185
S'        else:'
p113
sI186
S'            ccode = compile2(code,layer)'
p114
sI187
S''
sI188
S'        exec ccode in environment'
p115
sI189
S'    except HTTP:'
p116
sI190
S'        raise'
p117
sI191
S'    except Exception:'
p118
ssS'call'
p119
S"(code='# -*- coding: utf-8 -*- \\n\\n######################...e=True)\\n\\nresponse._vars=response._caller(upload)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}, layer='/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py')"
p120
sS'func'
p121
S'restricted'
p122
sa(dp123
g99
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p124
sg101
(dp125
S'auth.requires'
p126
S'<bound method Auth.requires of <gluon.tools.Auth object>>'
p127
sS'builtinTrue'
p128
S'True'
p129
sS'auth.user_id.admin_priv'
p130
S'undefined'
p131
sS'auth'
p132
S'<gluon.tools.Auth object>'
p133
sS'auth.user_id'
p134
S'12'
p135
ssg107
I200
sg108
(dp136
I195
S'    return l'
p137
sI196
S''
sI197
S'import os'
p138
sI198
S''
sI199
S'#controler for upload page'
p139
sI200
S'@auth.requires(auth.user_id.admin_priv == True)'
p140
sI201
S'def upload():'
p141
sI202
S'    up_form=SQLFORM(db.files)'
p142
sI203
S"    bol ='dskh'"
p143
sI204
S''
ssg119
S'()'
p144
sg121
S'<module>'
p145
sasS'pyver'
p146
S'Python 2.6.5: /usr/bin/python'
p147
sS'session'
p148
(dp149
S'_formkey[no_table_create]'
p150
S"'3d9176fb-7659-4cee-95ba-8634618e0268'"
p151
sS'string'
p152
S"' '"
p153
sS'flash'
p154
S'None'
p155
sS'auth'
p156
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 2, 7, 16, 14, 59, 910807), 'remember': False}>"
p157
sS'_formkey[files_create]'
p158
S"'f0a1488e-a962-48a6-8518-a3eeae6e1fdc'"
p159
sS'type1'
p160
S"'All'"
p161
sS'_formkey[login]'
p162
S"'afe28097-1741-4603-9e33-76652db23388'"
p163
ssS'etype'
p164
S"<type 'exceptions.AttributeError'>"
p165
sS'date'
p166
S'Mon Feb  7 16:15:00 2011'
p167
sS'response'
p168
(dp169
S'status'
p170
S'200'
p171
sg59
S'<cStringIO.StringO object>'
p172
sg76
S"<SimpleCookie: session_id_Music_Library='127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'>"
p173
sS'_vars'
p174
S'None'
p175
sS'title'
p176
S"'Music_Library'"
p177
sS'session_file'
p178
S"<open file '/home/aakarshit/Desktop/python/web2p...a95a450-b25c-436d-ba9b-788df6651212', mode 'rb+'>"
p179
sS'flash'
p180
S"''"
p181
sS'_custom_rollback'
p182
S'None'
p183
sS'session_id'
p184
S"'127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'"
p185
sS'headers'
p186
S"<Storage {'Expires': 'Mon, 07 Feb 2011 10:45:00 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p187
sS'meta'
p188
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p189
sS'session_filename'
p190
S"'/home/aakarshit/Desktop/python/web2py/applicatio...ns/127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'"
p191
sS'postprocessing'
p192
S'[]'
p193
sS'menu'
p194
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), (<lazyT 'Edit'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>)])]"
p195
sS'_view_environment'
p196
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p197
sS'subtitle'
p198
S"<lazyT 'customize me!'>"
p199
sS'session_id_name'
p200
S"'session_id_Music_Library'"
p201
sS'_custom_commit'
p202
S'None'
p203
sS'_caller'
p204
S'<function <lambda>>'
p205
sS'files'
p206
S'[<gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>]'
p207
sS'view'
p208
S"'default/upload.html'"
p209
ssS'locals'
p210
(dp211
S'Service'
p212
S"<class 'gluon.tools.Service'>"
p213
sS'OBJECT'
p214
S"<class 'gluon.html.OBJECT'>"
p215
sS'SQLDB'
p216
S"<class 'gluon.dal.DAL'>"
p217
sg148
S"<Storage {'_formkey[no_table_create]': '3d9176fb... 2, 7, 16, 14, 59, 910807), 'remember': False}>}>"
p218
sS'LINK'
p219
S"<class 'gluon.html.LINK'>"
p220
sS'BR'
p221
S"<class 'gluon.html.BR'>"
p222
sS'local_import'
p223
S'<function <lambda>>'
p224
sS'OPTGROUP'
p225
S"<class 'gluon.html.OPTGROUP'>"
p226
sS'PRE'
p227
S"<class 'gluon.html.PRE'>"
p228
sS'IS_INT_IN_RANGE'
p229
S"<class 'gluon.validators.IS_INT_IN_RANGE'>"
p230
sS'IS_LOWER'
p231
S"<class 'gluon.validators.IS_LOWER'>"
p232
sS'IS_STRONG'
p233
S"<class 'gluon.validators.IS_STRONG'>"
p234
sS'Recaptcha'
p235
S"<class 'gluon.tools.Recaptcha'>"
p236
sS'cache'
p237
S'<gluon.cache.Cache object>'
p238
sS'IS_IN_DB'
p239
S"<class 'gluon.validators.IS_IN_DB'>"
p240
sS'TAG'
p241
S'<gluon.html.__TAG__ object>'
p242
sS'SQLField'
p243
S"<class 'gluon.dal.Field'>"
p244
sS'mail'
p245
S'<gluon.tools.Mail object>'
p246
sS'BODY'
p247
S"<class 'gluon.html.BODY'>"
p248
sS'IS_DATE_IN_RANGE'
p249
S"<class 'gluon.validators.IS_DATE_IN_RANGE'>"
p250
sS'IFRAME'
p251
S"<class 'gluon.html.IFRAME'>"
p252
sS'URL'
p253
S'<function _URL>'
p254
sS'db'
p255
S"<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0x8d3544c>}>}>"
p256
sS'auth'
p257
S'<gluon.tools.Auth object>'
p258
sS'dat'
p259
S'2011'
p260
sS'P'
S"<class 'gluon.html.P'>"
p261
sS'TFOOT'
p262
S"<class 'gluon.html.TFOOT'>"
p263
sS'plugin_wiki_theme'
p264
S"'ui-darkness'"
p265
sS'XHTML'
p266
S"<class 'gluon.html.XHTML'>"
p267
sS'datetime'
p268
S"<module 'datetime' from '/usr/lib/python2.6/lib-dynload/datetime.so'>"
p269
sS'ON'
p270
g129
sS'OL'
p271
S"<class 'gluon.html.OL'>"
p272
sS'TEXTAREA'
p273
S"<class 'gluon.html.TEXTAREA'>"
p274
sS'MENU'
p275
S"<class 'gluon.html.MENU'>"
p276
sS't'
S"<Table {'first_name': <gluon.dal.Field object at...b669d15150d7109e5f7ab36744a5b7_auth_user.table'}>"
p277
sS'EM'
p278
S"<class 'gluon.html.EM'>"
p279
sS'CODE'
p280
S"<class 'gluon.html.CODE'>"
p281
sS'HTTP'
p282
S"<class 'gluon.http.HTTP'>"
p283
sS'HR'
p284
S"<class 'gluon.html.HR'>"
p285
sS'IS_DATETIME'
p286
S"<class 'gluon.validators.IS_DATETIME'>"
p287
sS'STYLE'
p288
S"<class 'gluon.html.STYLE'>"
p289
sS'LABEL'
p290
S"<class 'gluon.html.LABEL'>"
p291
sS'META'
p292
S"<class 'gluon.html.META'>"
p293
sS'PluginWikiWidgets'
p294
S'<class __builtin__.PluginWikiWidgets>'
p295
sS'plugins'
p296
S'<gluon.tools.PluginManager object>'
p297
sS'download'
p298
S'<function download>'
p299
sS'home'
p300
S'<function home>'
p301
sS'SELECT'
p302
S"<class 'gluon.html.SELECT'>"
p303
sS'index'
p304
S'<function index>'
p305
sS'CENTER'
p306
S"<class 'gluon.html.CENTER'>"
p307
sS'prettydate'
p308
S'<function prettydate>'
p309
sS'Crud'
p310
S"<class 'gluon.tools.Crud'>"
p311
sS'Auth'
p312
S"<class 'gluon.tools.Auth'>"
p313
sS'__builtins__'
p314
S"{'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'BufferError': <type 'exceptions.BufferError'>, 'BytesWarning': <type 'exceptions.BytesWarning'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, ...}"
p315
sS'IS_LIST_OF'
p316
S"<class 'gluon.validators.IS_LIST_OF'>"
p317
sS'SQLFORM'
p318
S"<class 'gluon.sqlhtml.SQLFORM'>"
p319
sS'LOAD'
p320
S'<gluon.compileapp.LoadFactory object>'
p321
sS'redirect'
p322
S'<function redirect>'
p323
sS'FIELDSET'
p324
S"<class 'gluon.html.FIELDSET'>"
p325
sS'IS_EQUAL_TO'
p326
S"<class 'gluon.validators.IS_EQUAL_TO'>"
p327
sS'embed64'
p328
S'<function embed64>'
p329
sS'logout'
p330
S'<function logout>'
p331
sS'INPUT'
p332
S"<class 'gluon.html.INPUT'>"
p333
sS'EMBED'
p334
S"<class 'gluon.html.EMBED'>"
p335
sS'_'
S'<function _>'
p336
sS'PluginWiki'
p337
S'<class __builtin__.PluginWiki>'
p338
sS'FORM'
p339
S"<class 'gluon.html.FORM'>"
p340
sS'H2'
p341
S"<class 'gluon.html.H2'>"
p342
sS'H3'
p343
S"<class 'gluon.html.H3'>"
p344
sS'H1'
p345
S"<class 'gluon.html.H1'>"
p346
sS'H6'
p347
S"<class 'gluon.html.H6'>"
p348
sS'H4'
p349
S"<class 'gluon.html.H4'>"
p350
sS'H5'
p351
S"<class 'gluon.html.H5'>"
p352
sS'UL'
p353
S"<class 'gluon.html.UL'>"
p354
sS'IS_UPPER'
p355
S"<class 'gluon.validators.IS_UPPER'>"
p356
sS'xmlescape'
p357
S'<function xmlescape>'
p358
sS'IS_TIME'
p359
S"<class 'gluon.validators.IS_TIME'>"
p360
sS'os'
p361
S"<module 'os' from '/usr/lib/python2.6/os.pyc'>"
p362
sS'OPTION'
p363
S"<class 'gluon.html.OPTION'>"
p364
sS'TITLE'
p365
S"<class 'gluon.html.TITLE'>"
p366
sS'DEFAULT'
p367
S"{'editor': False, 'level': 3, 'migrate': True, 'mode': 'markmin', 'theme': 'ui-darkness'}"
p368
sS'CRYPT'
p369
S"<class 'gluon.validators.CRYPT'>"
p370
sS'process_search'
p371
S'<function process_search>'
p372
sS'IS_EMPTY_OR'
p373
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p374
sS'MARKMIN'
p375
S"<class 'gluon.html.MARKMIN'>"
p376
sS'ips'
p377
S'<function ips>'
p378
sS'agents'
p379
S'150'
p380
sS'service'
p381
S'<gluon.tools.Service object>'
p382
sS'SCRIPT'
p383
S"<class 'gluon.html.SCRIPT'>"
p384
sS'geocode'
p385
S'<function geocode>'
p386
sg119
S'<function call>'
p387
sS'TABLE'
p388
S"<class 'gluon.html.TABLE'>"
p389
sS'IS_IPV4'
p390
S"<class 'gluon.validators.IS_IPV4'>"
p391
sS'IS_LENGTH'
p392
S"<class 'gluon.validators.IS_LENGTH'>"
p393
sS'XML'
p394
S"<class 'gluon.html.XML'>"
p395
sS'B'
S"<class 'gluon.html.B'>"
p396
sS'IMG'
p397
S"<class 'gluon.html.IMG'>"
p398
sS'SQLTABLE'
p399
S"<class 'gluon.sqlhtml.SQLTABLE'>"
p400
sS'IS_MATCH'
p401
S"<class 'gluon.validators.IS_MATCH'>"
p402
sS'IS_ALPHANUMERIC'
p403
S"<class 'gluon.validators.IS_ALPHANUMERIC'>"
p404
sS'_f'
p405
S"'plugin_wiki/multiselect/jquery.multiselect.js'"
p406
sS'SPAN'
p407
S"<class 'gluon.html.SPAN'>"
p408
sS'plugin_rating'
p409
S'<function plugin_rating>'
p410
sS'plugin_wiki_editor'
p411
g81
sS'IS_SLUG'
p412
S"<class 'gluon.validators.IS_SLUG'>"
p413
sS'CLEANUP'
p414
S"<class 'gluon.validators.CLEANUP'>"
p415
sS'today'
p416
S'datetime.date(2011, 2, 7)'
p417
sS'plugin_wiki_migrate'
p418
g129
sS'fetch'
p419
S'<function fetch>'
p420
sS'IS_DATE'
p421
S"<class 'gluon.validators.IS_DATE'>"
p422
sS'IS_EMAIL'
p423
S"<class 'gluon.validators.IS_EMAIL'>"
p424
sS'IS_NOT_EMPTY'
p425
S"<class 'gluon.validators.IS_NOT_EMPTY'>"
p426
sS'm'
g129
sS'BEAUTIFY'
p427
S"<class 'gluon.html.BEAUTIFY'>"
p428
sS'TBODY'
p429
S"<class 'gluon.html.TBODY'>"
p430
sS'Field'
p431
S"<class 'gluon.dal.Field'>"
p432
sS'plugin_wiki'
p433
S'<__builtin__.PluginWiki instance>'
p434
sS'plugin_wiki_level'
p435
S'3'
sS'Mail'
p436
S"<class 'gluon.tools.Mail'>"
p437
sS'DIV'
p438
S"<class 'gluon.html.DIV'>"
p439
sS'LEGEND'
p440
S"<class 'gluon.html.LEGEND'>"
p441
sS'DAL'
p442
S"<class 'gluon.dal.DAL'>"
p443
sS'TT'
p444
S"<class 'gluon.html.TT'>"
p445
sS'TR'
p446
S"<class 'gluon.html.TR'>"
p447
sS'LI'
p448
S"<class 'gluon.html.LI'>"
p449
sS'TH'
p450
S"<class 'gluon.html.TH'>"
p451
sS'TD'
p452
S"<class 'gluon.html.TD'>"
p453
sS'PluginManager'
p454
S"<class 'gluon.tools.PluginManager'>"
p455
sS'IS_URL'
p456
S"<class 'gluon.validators.IS_URL'>"
p457
sS'A'
S"<class 'gluon.html.A'>"
p458
sS'HEAD'
p459
S"<class 'gluon.html.HEAD'>"
p460
sS'IS_DATETIME_IN_RANGE'
p461
S"<class 'gluon.validators.IS_DATETIME_IN_RANGE'>"
p462
sS'HTML'
p463
S"<class 'gluon.html.HTML'>"
p464
sS'IS_IMAGE'
p465
S"<class 'gluon.validators.IS_IMAGE'>"
p466
sS'I'
S"<class 'gluon.html.I'>"
p467
sS'crud'
p468
S'<gluon.tools.Crud object>'
p469
sS'IS_NOT_IN_DB'
p470
S"<class 'gluon.validators.IS_NOT_IN_DB'>"
p471
sS'user'
p472
S'<function user>'
p473
sg168
S"<Storage {'status': 200, 'body': <cStringIO.Stri...object at 0x8d355ec>], '_custom_rollback': None}>"
p474
sS'THEAD'
p475
S"<class 'gluon.html.THEAD'>"
p476
sS'IS_NULL_OR'
p477
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p478
sS'plugin_wiki_mode'
p479
S"'markmin'"
p480
sS'IS_FLOAT_IN_RANGE'
p481
S"<class 'gluon.validators.IS_FLOAT_IN_RANGE'>"
p482
sS'register'
p483
S'<function register>'
p484
sg55
S"<Storage {'function': 'upload', 'body': <open fi...009Download Largest Collection \\x00\\x01\\x0c')}>}>"
p485
sS'IS_EXPR'
p486
S"<class 'gluon.validators.IS_EXPR'>"
p487
sS'IS_IN_SET'
p488
S"<class 'gluon.validators.IS_IN_SET'>"
p489
sS'IS_UPLOAD_FILENAME'
p490
S"<class 'gluon.validators.IS_UPLOAD_FILENAME'>"
p491
sS'IS_DECIMAL_IN_RANGE'
p492
S"<class 'gluon.validators.IS_DECIMAL_IN_RANGE'>"
p493
sS're'
p494
S"<module 're' from '/usr/lib/python2.6/re.pyc'>"
p495
sS'T'
S'<gluon.languages.translator object>'
p496
sssS'traceback'
p497
S'Traceback (most recent call last):\n  File "/home/aakarshit/Desktop/python/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 200, in <module>\n    @auth.requires(auth.user_id.admin_priv == True)\nAttributeError: \'int\' object has no attribute \'admin_priv\'\n'
p498
s.