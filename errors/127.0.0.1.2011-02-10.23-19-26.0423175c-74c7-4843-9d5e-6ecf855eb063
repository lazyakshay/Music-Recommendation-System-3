(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n#default homepage redirected to home\nauth.settings.create_user_groups = False\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalizatioREADMEn operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    is_admin=0\n    if session.auth.user.admin_priv == True:\n        if auth.has_membership(\'Secret Agent\', session.auth.user.id) == False:\n            auth.add_membership(\'Secret Agent\', session.auth.user.id)            \n            \n    if session.auth.user.admin_priv == False:\n        if auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n            db(db.auth_membership.user_id == session.auth.user.id).delete()                       \n            \n    redirect(URL(r=request,f=\'home\'))\n    return dict(message=T(\'Hello World\'))\n\n#function for user login/logout\ndef user():\n        \n    if request.args(0)==\'logout\':\n        ip=0;\n        down=0;\n        for i in db(db.ip_add.ip==str(request.env.remote_addr)).select():\n            ip=i.id\n            down=i.hits+1   \n        if ip:  db(db.ip_add.id==ip).update(hits=down,last=request.now,port=request.env.remote_port)\n        else:  db.ip_add.insert(ip=str(request.env.remote_addr),hits=0,last=request.now,port=request.env.remote_port)\n        session.clear()     #if requestfor logout clear the session\n        redirect(URL(r=request,f=\'user\',args=\'login\'))#redirect to login page\n    \n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))         #contains details of top download\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))       #contains details of recently uploaded files\n    return dict(form=auth(),down=down,recent=recent)\n\n#the logout function\ndef logout():\n    session.clear()\n    redirect(URL(r=request,f=\'index\'))\n    return \n\n\n#the page to register\ndef register():\n    session.clear()\n    form=SQLFORM(db.auth_user)\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        \n    if form.accepts(request.vars,session):\n            redirect(URL(r=request,f=\'user\',args=\'login\'))#if registeration is sucessful  redirct to homepage\n            \n    return dict(form=form,down=down,recent=recent)\n\n#default function to download the filea in database\n@auth.requires_login()\ndef download():\n     \n    if(request.vars.has_key(\'songid\')):  #if it is called to download the no of download of that song is increased by one\n        rat1=db(db.plugin_rating_master.id>0).select()\n        rat=3.0\n        for i in rat1:\n            rat=i.rating\n        so=int(request.vars[\'songid\'])\n        curr=db(db.song.id==so).select()\n        down=0\n        rat1=3.0\n        for i in curr:\n             down=int(i.nod)+1\n             rat1=i.rating\n        rat=((rat1*(down-1))+rat)/down\n        db(db.song.id==so).update(nod=down,rating=rat)\n        \n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n#controller for general homepage\n    \n@auth.requires_login()\ndef home():\n    admin=0\n                                                                     \n    if(auth.has_membership(\'adminstration\')):admin=1\n        \n    form = SQLFORM.factory(\n            Field(\'Search\'),\n            Field(\'type\',\'boolean\', requires=IS_IN_SET([\'All\',\'Artist\',\'Album\',\'Titles\']),widget=SQLFORM.widgets.radio.widget,default=\'All\'))\n    g=[]\n     \n    if session.string==None:\n          session.string=" "\n          session.type1="All"\n    string=session.string\n    type1=session.type1\n    pageno=0\n    next=0\n    pre=0\n    no=15\n        \n        \n    if request.vars.has_key(\'pageno\'):\n          pageno=int(request.vars[\'pageno\'])\n          no=pageno*15+15\n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'Search\']\n          session.type1=request.vars[\'type\']\n          redirect(URL(r=request,f=\'home\'))\n    elif form.errors:\n          response.flash = \'form has errors\'\n       \n    g=process_search(string,type1)\n    count=len(g)\n       \n    found=""\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    tmp=db(db.song.id>0).select()\n    if(g):\n          found=tmp.find(lambda x: x.id in g)\n    else: response.flash=\'no song found\'\n             \n    if pageno>0:\n          pre=1\n    if no <count:\n          next=1\n    session.string=string\n    session.type1=type1 \n\n    newlink = []\n    newlabel = []\t\n\n    if  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \tnewlink.append(\'upload\')\n\tnewlabel.append(\'UPLOAD\')\n\n        newlink.append(\'mymusic\')\n\tnewlabel.append(\'MY SONGS\')\n\n    else:\n\tnewlink.append(\'request_upload\')\n\tnewlabel.append(\'REQUEST\')\n\n       \tnewlink.append(\'update_profile\')\n\tnewlabel.append(\'PROFILE\')\n\n    return dict(admin=admin,form=form,found=found,pageno=pageno,pre=pre,next=next,count=count,down=down,recent=recent, newlink = newlink, newlabel = newlabel)\n    \n    \nimport os\n@auth.requires_membership(\'adminstration\')\ndef ips():\n    ip12=db(db.ip_add.id>0).select()\n    return dict(ip=ip12)\n    \nimport re\n#function that process the search string and returns the ids of mathched results\n@auth.requires_login()\ndef process_search(s1,p):\n    s=\'\\w*\\s*\\W*\'\n    reg=s\n    for i in s1.split():\n        reg=reg+i+s         #create a regular expression\n    l=[]\n    #search for the regx in database\n    for i in db(db.song.id>0).select(db.song.ALL):\n        tmp=i.id\n       \n        if((p==\'All\' or p==\'Album\')and (re.search(reg,i.album,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Titles\')and (re.search(reg,i.name,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Artist\')and (re.search(reg,i.artist,re.IGNORECASE))):\n           if(i.id not in l):l+=[i.id]   \n         \n    \n    return l\n \nimport os\n\n#controler for upload page only for admin\n@auth.requires_membership(\'Secret Agent\')\ndef upload():\n    up_form=SQLFORM(db.files)\n    bol =\'dskh\' \n \n    if up_form.accepts(request.vars,session):\n            response.flash=(T(\'file uploaded\'))\n            path = os.path.join(request.folder,\'uploads\',up_form.vars[\'file\'])\n            bol=get_info(path,up_form.vars[\'id\'])   #get the metadata of uploaded file\n            if(bol[\'done\']==True):\n                 bol=bol[\'m\']\n                 #insert the metadata in database\n                 db.song.insert(file=up_form.vars[\'id\'],name=bol[\'title\'][0],doup=request.now,lyrics=bol[\'lyrics\'],length=bol[\'length\'],btr=bol[\'bit_rate\'], artist=bol[\'artist\'][0], album=bol[\'album\'][0], year=int(bol[\'date\']),genere=bol[\'genere\'][0],user_id=session.auth.user.id,pic=bol[\'img\'])\n                         \n            else:db(db.file.id==up_form.vars[\'id\']).delete()#if there is error in extracting metadata delete the file\n    elif up_form.errors:\n           response.flash=(T(\'error occured\'))\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n    return dict(form=up_form,down=down,recent=recent,byme=byme)    \n\n\n#controller  for mymusic page\n@auth.requires_login()\ndef mymusic():\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))#contains details of recently  uploadded files\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n        \n        pageno=0\n        next=0\n        pre=0\n        no=15\n        n=15\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])\n            no=pageno*15+15                             #get the current page no\n        count=db(db.song.user_id==session.auth.user.id).count() #get the total no of entries\n         \n        if pageno > 0:\n            pre=1\n        if no < count:\n            next=1\n        else :\n            no-=15\n            n=count-no \n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(pageno*15,n))#contains details of top songs uploaded by user\n\n        return dict(pageno=pageno,pre=pre,next=next,down=down,recent=recent,byme=byme)\n        \n\n#controller for requesting songs to be added only for genral users and not admin\n@auth.requires_login()\ndef request_upload(): \n\n    form = SQLFORM.factory(\n            Field(\'SongDetails\', \'text\')) \n \n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'SongDetails\']\n\t  response.flash = \'Your request has been sent to the admin\'\n    \t  mail.send(to=[\'web2pymail@gmail.com\'], subject=\'Song request\', message=\'I want to request you to add the following song to the database:\\n\' + session.string + \'\\nMy email id is \' + session.auth.user.email)\t       \t  \n\n    elif form.errors:\n          response.flash = \'form has errors\'\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n\n    return dict(form=form,down=down,recent=recent,byme=byme)\n    \n \n#controller for updating profile only for genral users and not admin\n@auth.requires_login()\ndef update_profile(): \n\n    var1 = session.auth.user.id\n    form = crud.update(db.auth_user, var1) \n       \t      \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n\n    return dict(form=form,down=down,recent=recent,byme=byme)\n\n      \nimport os\n\n#controller forhandle playlist page\n@auth.requires_login()\ndef playlist():    \n        pageno=0\n        next=0\n        pre=0\n        no=11\n        n=11\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])      #get the current page no\n            if pageno < 0 : redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))\n            no=pageno*11+11\n        \n        byme=db(db.playlist.user==session.auth.user.id).select()#contains details of top songs uploaded by user\n        \n        iid=0  \n        \n          \n        li=[]\n        for i in byme:\n            li+=[i.id]\n        if len(li)>0: iid=li[0]\n        \n                \n        if request.vars.has_key(\'id\'):\n            iid=int(request.vars[\'id\'])    \n            \n        if len(li)>0 and iid not in li: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        \n        count=db(db.playlist.user==session.auth.user.id).count()#get the total no of entries\n        \n        if pageno*11 > count: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        elif pageno*11==count and pageno >0:redirect(URL(r=request,f=\'playlist\',c=\'default\',vars=dict(pageno=pageno-1)))#redirect to previouspage\n      \n        song=db((db.list.list==iid)&(db.list.song==db.song.id)&(db.song.file==db.files.id)).select()  #order by orders\n        pname=""\n        for i in db(db.playlist.id==iid).select():\n             pname=i.name\n        #create the playlist .xfps file\n        str1=\'\xef\xbb\xbf<?xml version="1.0" encoding="UTF-8" ?> \\n<playlist version="0" xmlns="http://xspf.org/ns/0/">\\n <title>\'\n        str2=\'\'\' \n         </title>\n         <trackList>\'\'\'\n        str3=\'\'\'<track>\n          <location>\'\'\'\n\n        str4=\'\'\'</location>\n            <image>\'\'\'\n        str5=\'\'\'</image>\n        <annotation>\'\'\'\n        str6=\'\'\'</annotation>\n            </track>\'\'\'\n        str7=\'\'\'</trackList>\n            </playlist>\'\'\'\n        if len(li)>0 :\n            plist=file(os.path.join(request.folder,\'static\',(\'tmp\'+\'.xspf\')),\'w\')\n            plist.write(str1)\n            plist.write(pname)\n            plist.write(str2)\n        \n            for i in song:\n               plist.write(str3)\n               plist.write(str(URL(r=request,f=\'download\',c=\'default\',args=i.files.file)))\n               plist.write(str4)\n               plist.write(str(URL(request.application,\'static\',i.song.pic)))\n               plist.write(str5)\n               plist.write(i.song.name)\n               plist.write(str6)\n               #response.flash=song\n            plist.write(str7)        \n            plist.close()\n            #the playlist is created\n            \n        if pageno>0:\n            pre=1\n        if no <count:\n            next=1\n        else :\n            no-=11\n            n=count-no\n            \n        form = SQLFORM.factory(Field(\'new\',\'string\',label="NEW PLAYLIST"))#form to insert new playlist\n            \n        if form.accepts(request.vars,session):\n            response.flash=\'New Playlist created\'\n            db.playlist.insert(user=session.auth.user.id,name=form.vars[\'new\'])\n            redirect(URL(r=request,f=\'playlist\',vars=dict(pageno=pageno)))\n        elif form.errors:\n                response.flash=\'error\'\n        \n                    \n        byme=db(db.playlist.user==session.auth.user.id).select(limitby=(pageno*11,n))#contains details of top songs uploaded by user\n        scr1=" " \n        if len(li)>0:   \n            scr1=URL(request.application,\'static\',\'tmp\'+\'.xspf\')\n        scr2=URL(request.application,\'static\',os.path.join(\'ply\',\'xspf_player.swf\'))\n            \n        ply=XML(\'<object type="application/x-shockwave-flash" width="650" height="600" data="%(scr2)s?playlist_url=%(scr1)s">  <param name="movie"  value="%(scr2)s?autoplay=1&autoload=1&playlist_url=%(scr1)s"/> <embed  allowfullscreen="false" allowscriptaccess="always" src="%(scr2)s?playlist_url=%(scr1)s pluginspage=\xe2\x80\x9dhttp://www.macromedia.com/go/getflashplayer\xe2\x80\x9d" ></embed> </object>\'%dict(scr1=scr1,scr2=scr2))#the XML lines for player\n       \n        \n    \tnewlink = []\n\tnewlabel = []\t\n\n\tif  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \t\tnewlink.append(\'upload\')\n\t\tnewlabel.append(\'UPLOAD\')\n\n        \tnewlink.append(\'mymusic\')\n\t\tnewlabel.append(\'MY SONGS\')\n\n    \telse:\n\t\tnewlink.append(\'request_upload\')\n\t\tnewlabel.append(\'REQUEST\')\n\n       \t\tnewlink.append(\'update_profile\')\n\t\tnewlabel.append(\'PROFILE\')\n            \n        return dict(form=form,ply=ply,pageno=pageno,pre=pre,next=next,byme=byme,pname=pname, newlink=newlink, newlabel=newlabel)\n    \n#the controller for play song page\n@auth.requires_login()\ndef play():\n    \n        so=int(request.args(0))\n        som1=db(db.song.id==so).select()\n        if (db(db.song.id==so).count())<=0:\n            redirect(URL(r=request,f=\'user\',args=\'logout\'))#call for logout if vars not in range\n        \n        soid=0\n        for i in som1:\n          soid=i.file\n          sopic=i.pic\n          sonam=i.name\n        som=db(db.files.id==soid).select()\n        filn=""\n        for i in som:\n            filn=i.file\n        #create form for comment\n        form = SQLFORM.factory(Field(\'comment\',\'text\'))\n        \n        db.list.song.default=so\n        db.list.song.readable=False\n        db.list.favourite.readable=False\n        db.list.listen.readable=False\n        db.list.orders.readable=False\n        db.list.song.writable=False\n        db.list.favourite.writable=False\n        db.list.listen.writable=False\n        db.list.orders.writable=False\n        \n        myplaylist=[]\n        idform=[]\n        for i in db((db.playlist.user==session.auth.user.id)).select():\n              myplaylist+=[i.name]\n              idform+=[i.id]\n        \n   \n        db.list.list.requires=IS_IN_SET(idform,myplaylist)\n        form1=SQLFORM(db.list)\n        response.flash=sonam\n        if form1.accepts(request.vars,session):\n            response.flash="SONG ADDED TO PLAYLIST"\n        if form.accepts(request.vars,session):\n            response.flash=\'comment added\'\n            db.comments.insert(user_id=session.auth.user.id,song_id=so,comment=form.vars[\'comment\'],date=request.now)\n            \n             \n        sopic=URL(request.application,\'static\',sopic)#the album art pic\n        pic=XML(\'<img src=%(sopic)s align="center"  width="240px" height="240"\\>\'% dict(sopic=sopic)) \n        src=URL(r=request,c=\'default\',f=\'download\',args=filn)\n        width=\'400\'\n        height=45\n        """\n        ## Embeds a media file (such as flash video or an mp3 file)\n        - ``src`` is the src of the video\n        - ``width`` is the width of the image\n        - ``height`` is the height of the image\n        """\n        #the music player\n        ply=XML(\'<embed allowfullscreen="false" allowscriptaccess="always" flashvars="height=%(height)s&width=%(width)s&file=%(src)s" height="%(height)spx" src="%(url)s" width="%(width)spx"></embed>\'%dict(url=URL(request.application,\'static\',\'plugin_wiki/mediaplayer.swf\'),src=src,width=width,height=height))\n        \n        #select the comment for the song\n        comm=db((db.comments.song_id==so) &( db.comments.user_id==db.auth_user.id)).select(db.auth_user.first_name,db.auth_user.last_name,db.comments.comment,db.comments.date,db.auth_user.pic,db.auth_user.id,db.comments.id,orderby=~db.comments.date,limitby=(0,10))\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15))\n\n    \tnewlink = []\n\tnewlabel = []\t\n\n\tif  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \t\tnewlink.append(\'upload\')\n\t\tnewlabel.append(\'UPLOAD\')\n\n        \tnewlink.append(\'mymusic\')\n\t\tnewlabel.append(\'MY SONGS\')\n\n    \telse:\n\t\tnewlink.append(\'request_upload\')\n\t\tnewlabel.append(\'REQUEST\')\n\n       \t\tnewlink.append(\'update_profile\')\n\t\tnewlabel.append(\'PROFILE\')\n        \n        return dict(ply=ply,down=down,recent=recent,byme=byme,comm=comm,form=form,pic=pic,som=som1,ffff=filn,form1=form1, newlink=newlink, newlabel=newlabel)   \n\n#contrller for the deleteplaylist function\n@auth.requires_login()        \ndef deletplaylist():\n    playl=int(request.vars[\'id\'])\n    pag=int(request.vars[\'pageno\'])\n    db(db.list.list==playl).delete()\n    db(db.playlist.id==playl).delete()\n    redirect(URL(r=request, f=\'playlist\',vars=dict(pageno=pag)))\n    return\n\n#contrller for the deletecomment function\n@auth.requires_login()\ndef deletcomment():\n    song=int(request.vars[\'song\'])\n    com=int(request.vars[\'com\'])\n    db(db.comments.id==com).delete()\n    redirect(URL(r=request, f=\'play\',args=song))\n    return        \n\n\n@auth.requires_membership(\'adminstration\')\ndef admins():\n    names=[]\n    ids=[]\n    for i in db(db.auth_user.id>0).select():\n              ids+=[i.id]\n              names+=[i.first_name+\' \'+i.last_name]\n    for i in db((db.auth_user.id==db.auth_membership.user_id)).select():\n           k=ids.index(i.auth_user.id)\n           del(ids[k])\n           del(names[k])\n      #  response.flash="Deleting Options"\n           form2 = SQLFORM.factory(\n            Field(\'user\',requires=IS_IN_SET(ids,names),label=\'Delete User\'))\n    son=db(db.song.id>0).select()\n    sonn=[]\n    sonid=[]\n    for i in son:\n        sonid+=[i.id]\n        sonn+=[i.name+\' artist: \'+i.artist]   \n    if request.vars.has_key(\'user\'):\n       #if form2.accepts(request.vars,session):\n       if not form2.errors:\n        db(db.comments.user_id==request.vars[\'user\']).delete()\n        for i in db(db.playlist.user==request.vars[\'user\']).select():\n            db(db.list.list==i.id).delete()\n        db(db.playlist.user==request.vars[\'user\']).delete()\n        db(db.auth_user.id==request.vars[\'user\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n       elif form2.errors: pass  \n    \n    form1 = SQLFORM.factory(\n            Field(\'song\',requires=IS_IN_SET(sonid,sonn),label=\'Delete Song\'))\n    \n    if form1.accepts(request.vars, session):\n           # response.flash="qefw"\n            \n        db(db.comments.song_id==request.vars[\'song\']).delete()\n        \n        art=db(db.song.id==request.vars[\'song\']).select()\n        artpic=""\n        for i in art:\n            artpic=os.path.join(request.folder,\'static\',i.pic)\n        try:\n            os.remove(artpic)\n        except OSError:\n             response.flash="error"\n        for i in db((db.song.id==request.vars[\'song\'])&(db.files.id==db.song.file)).select():\n            db(db.files.id==i.files.id).delete()\n        db(db.song.id==request.vars[\'song\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n        \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    return dict(down=down,recent=recent,form=form2,form1=form1)\n\n\n\n\n\nfrom mutagen.mp3 import MP3\nfrom mutagen.easyid3 import EasyID3\nimport mutagen.id3\nfrom mutagen.id3 import ID3, TIT2, TALB, TPE1, TPE2, COMM, USLT, TCOM, TCON\n\nfrom mutagen.id3 import ID3NoHeaderError\nfrom mutagen.mp3 import HeaderNotFoundError\n\n#function to extract metadata from MP3 file\n@auth.requires_login()\ndef get_info(f,filen): \n    filen=str(filen)\n   \n    m={}\n    try:\n        audio = MP3(f)\n    except HeaderNotFoundError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False) \n    try:\n       tagg = ID3(f)\n    except ID3NoHeaderError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False)\n   \n    ext=\'.img\'\n    flag=1\n    imgfilename=""\n    #lookfor albumart\n    for frame in tagg.getall("APIC"):\n                flag=2\n                if (frame.mime == "image/jpeg") or (frame.mime == "image/jpg"): ext = ".jpg"\n                if frame.mime == "image/png": ext = ".png"\n                if frame.mime == "image/gif": ext = ".gif"\n\n                filen=filen+ext\n                #storethe album art\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n             \n                myfile = file(imgfilename, \'w\')\n                myfile.write(frame.data)\n                myfile.close()\n    if(flag==1):\n                filen=filen+\'.jpg\'\n                imgfilename=str(URL(request.folder,\'static\',\'albumart.jpg\'))\n                ff=file(imgfilename,\'r\')\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n                myfile = file(imgfilename, \'w\')\n                myfile.write(ff.read())\n                myfile.close()\n                ff.close()\n    m={}            \n    m = dict(MP3(f, ID3=EasyID3))\n    l=tagg.getall(u"USLT")\n    m[\'lyrics\']=""\n    if(not(m.has_key(\'artist\'))):m[\'artist\']=[\'unknown\']\n    if(not(m.has_key(\'album\'))):m[\'album\']=[\'unknown\']\n    if(not(m.has_key(\'title\'))):m[\'title\']=[\'unknown\']\n    if(not(m.has_key(\'genere\'))):m[\'genere\']=[\'unknown\']  \n    if(not(m.has_key(\'date\'))):m[u\'date\']=[\'2014\']\n    m[\'date\']=m[\'date\'][0][:4]\n    for i in tagg.getall(u"USLT"):\n         m[\'lyrics\']=i.text\n         \n    m[\'length\']=audio.info.length\n    m[\'bit_rate\']=audio.info.bitrate/(1000)\n    m[\'img\']=filen\n    \n    return dict(m=m,done=True)\n\nresponse._vars=response._caller(user)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__module__'
p11
S"'pysqlite2.dbapi2'"
p12
sS'__getslice__'
p13
S"<method-wrapper '__getslice__' of OperationalError object>"
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of OperationalError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of OperationalError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of OperationalError object>'
p22
sS'__weakref__'
p23
S'None'
p24
sS'__init__'
p25
S"<method-wrapper '__init__' of OperationalError object>"
p26
sS'__setattr__'
p27
S"<method-wrapper '__setattr__' of OperationalError object>"
p28
sS'__reduce_ex__'
p29
S'<built-in method __reduce_ex__ of OperationalError object>'
p30
sS'__new__'
p31
S'<built-in method __new__ of type object>'
p32
sS'__format__'
p33
S'<built-in method __format__ of OperationalError object>'
p34
sS'__class__'
p35
S"<class 'pysqlite2.dbapi2.OperationalError'>"
p36
sS'__doc__'
p37
S'None'
p38
sS'__getitem__'
p39
S"<method-wrapper '__getitem__' of OperationalError object>"
p40
sS'__setstate__'
p41
S'<built-in method __setstate__ of OperationalError object>'
p42
sS'__getattribute__'
p43
S"<method-wrapper '__getattribute__' of OperationalError object>"
p44
sS'args'
p45
S'(\'near "WHERE": syntax error\',)'
p46
sS'__subclasshook__'
p47
S'<built-in method __subclasshook__ of type object>'
p48
sS'__unicode__'
p49
S'<built-in method __unicode__ of OperationalError object>'
p50
sS'__delattr__'
p51
S"<method-wrapper '__delattr__' of OperationalError object>"
p52
sS'__repr__'
p53
S"<method-wrapper '__repr__' of OperationalError object>"
p54
sS'__hash__'
p55
S"<method-wrapper '__hash__' of OperationalError object>"
p56
ssS'evalue'
p57
S'near "WHERE": syntax error'
p58
sS'request'
p59
(dp60
S'function'
p61
S"'user'"
p62
sS'body'
p63
S"<open file '<fdopen>', mode 'w+b'>"
p64
sS'wsgi'
p65
S"<Storage {'start_response': <function <lambda> a...c_Library/default/user/request_reset_password'}}>"
p66
sS'extension'
p67
S"'html'"
p68
sS'vars'
p69
S"<Storage {'email': 'wahid311@gmail.com', '_formk...', '_next': '/Music_Library/default/user/login'}>"
p70
sS'cid'
p71
S'None'
p72
sS'url'
p73
S'<gluon.html.XML object>'
p74
sS'raw_extension'
p75
S'None'
p76
sg45
S"['request_reset_password']"
p77
sS'controller'
p78
S"'default'"
p79
sS'cookies'
p80
S"<SimpleCookie: session_id_Music_Library='127.0.0...'127.0.0.1-3a39c27e-c8bf-4792-bef6-1fb3741b2db8'>"
p81
sS'application'
p82
S"'Music_Library'"
p83
sS'ajax'
p84
S'False'
p85
sS'client'
p86
S"'127.0.0.1'"
p87
sS'env'
p88
S"<Storage {'content_length': '615', 'http_accept_...ic_Library/default/user/request_reset_password'}>"
p89
sS'raw_args'
p90
S"'request_reset_password'"
p91
sS'get_vars'
p92
S'<Storage {}>'
p93
sS'folder'
p94
S"'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/'"
p95
sS'now'
p96
S'datetime.datetime(2011, 2, 10, 23, 18, 55, 845236)'
p97
sS'post_vars'
p98
S"<Storage {'email': 'wahid311@gmail.com', '_formk...', '_next': '/Music_Library/default/user/login'}>"
p99
ssS'frames'
p100
(lp101
(dp102
S'file'
p103
S'/home/aakarshit/Desktop/python/web2py/gluon/restricted.py'
p104
sS'dump'
p105
(dp106
S'environment'
p107
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}"
p108
sS'ccode'
p109
S'<code object <module> at 0x98a2920, file "/home/...s/Music_Library/controllers/default.py", line 12>'
p110
ssS'lnum'
p111
I188
sS'lines'
p112
(dp113
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p114
sI183
S'        if type(code) == types.CodeType:'
p115
sI184
S'            ccode = code'
p116
sI185
S'        else:'
p117
sI186
S'            ccode = compile2(code,layer)'
p118
sI187
S''
sI188
S'        exec ccode in environment'
p119
sI189
S'    except HTTP:'
p120
sI190
S'        raise'
p121
sI191
S'    except Exception:'
p122
ssS'call'
p123
S"(code='# -*- coding: utf-8 -*- \\n\\n######################...one=True)\\n\\nresponse._vars=response._caller(user)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}, layer='/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py')"
p124
sS'func'
p125
S'restricted'
p126
sa(dp127
g103
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p128
sg105
(dp129
sg111
I670
sg112
(dp130
I659
S"    if(not(m.has_key('date'))):m[u'date']=['2014']"
p131
sI660
S"    m['date']=m['date'][0][:4]"
p132
sI661
S'    for i in tagg.getall(u"USLT"):'
p133
sI662
S"         m['lyrics']=i.text"
p134
sI663
S''
sI664
S"    m['length']=audio.info.length"
p135
sI665
S"    m['bit_rate']=audio.info.bitrate/(1000)"
p136
sI666
S"    m['img']=filen"
p137
sI667
S''
sI668
S'    return dict(m=m,done=True)'
p138
ssg123
S'()'
p139
sg125
S'<module>'
p140
sa(dp141
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/globals.py'
p142
sg105
(dp143
S'self'
p144
S'undefined'
p145
sS'f'
S'<function user>'
p146
ssg111
I95
sg112
(dp147
I96
S'        self._view_environment = None'
p148
sI97
S'        self._custom_commit = None'
p149
sI98
S'        self._custom_rollback = None'
p150
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p151
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p152
sI92
S'        self.menu = []            # used by the default view layout'
p153
sI93
S'        self.files = []           # used by web2py_ajax.html'
p154
sI94
S'        self._vars = None'
p155
sI95
S'        self._caller = lambda f: f()'
p156
ssg123
S'(f=<function user>)'
p157
sg125
S'<lambda>'
p158
sa(dp159
g103
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p160
sg105
(dp161
S'global auth'
p162
S'<gluon.tools.Auth object>'
p163
sS'down'
p164
S'<gluon.dal.Rows object>'
p165
sS'form'
p166
g145
sS'builtindict'
p167
S"<type 'dict'>"
p168
sS'recent'
p169
S'<gluon.dal.Rows object>'
p170
ssg111
I61
sg112
(dp171
I64
S'def logout():'
p172
sI65
S'    session.clear()'
p173
sI56
S'    to decorate functions that need access control'
p174
sI57
S'    """'
p175
sI58
S''
sI59
S'    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))         #contains details of top download'
p176
sI60
S'    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))       #contains details of recently uploaded files'
p177
sI61
S'    return dict(form=auth(),down=down,recent=recent)'
p178
sI62
S''
sI63
S'#the logout function'
p179
ssg123
S'()'
p180
sg125
S'user'
p181
sa(dp182
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/tools.py'
p183
sg105
(dp184
S'self'
p185
S'<gluon.tools.Auth object>'
p186
sS'self.request_reset_password'
p187
S'<bound method Auth.request_reset_password of <gluon.tools.Auth object>>'
p188
ssg111
I1044
sg112
(dp189
I1039
S"        elif args[0] == 'retrieve_password':"
p190
sI1040
S'            return self.retrieve_password()'
p191
sI1041
S"        elif args[0] == 'reset_password':"
p192
sI1042
S'            return self.reset_password()'
p193
sI1043
S"        elif args[0] == 'request_reset_password':"
p194
sI1044
S'            return self.request_reset_password()'
p195
sI1045
S"        elif args[0] == 'change_password':"
p196
sI1046
S'            return self.change_password()'
p197
sI1047
S"        elif args[0] == 'profile':"
p198
sI1048
S'            return self.profile()'
p199
ssg123
S'(self=<gluon.tools.Auth object>)'
p200
sg125
S'__call__'
p201
sa(dp202
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/tools.py'
p203
sg105
(dp204
S'reset_password_key'
p205
S"'1297360135-8c39b8bc-65cc-498e-b048-48427942569e'"
p206
sS'user.update_record'
p207
S'<function <lambda>>'
p208
sS'user'
p209
S"<Row {'auth_event': <gluon.dal.Set object at 0x9..._wiki_tag': <gluon.dal.Set object at 0x98b836c>}>"
p210
ssg111
I2014
sg112
(dp211
I2016
S'                session.flash = self.messages.unable_to_send_email'
p212
sI2017
S'            if log:'
p213
sI2018
S'                self.log_event(log % user)'
p214
sI2009
S'            if self.settings.mailer.send(to=form.vars.email,'
p215
sI2010
S'                                         subject=self.messages.reset_password_subject,'
p216
sI2011
S'                                         message=self.messages.reset_password % \\'
p217
sI2012
S'                                             dict(key=reset_password_key)):'
p218
sI2013
S'                session.flash = self.messages.email_sent'
p219
sI2014
S'                user.update_record(reset_password_key=reset_password_key)'
p220
sI2015
S'            else:'
p221
ssg123
S"(self=<gluon.tools.Auth object>, next='/Music_Library/default/user/login', onvalidation=[], onaccept=None, log='User %(id)s Password reset')"
p222
sg125
S'request_reset_password'
p223
sa(dp224
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p225
sg105
(dp226
S'a'
S"{'reset_password_key': '1297360135-8c39b8bc-65cc-498e-b048-48427942569e'}"
p227
sS'global update_record'
p228
S'<function update_record>'
p229
sS'colset'
p230
g145
sS'builtinid'
p231
S'<built-in function id>'
p232
sS'table'
p233
g145
sS'_'
S"(<Row {'auth_event': <gluon.dal.Set object at 0x9..._wiki_tag': <gluon.dal.Set object at 0x98b836c>}>, <Table {'first_name': <gluon.dal.Field object at...b669d15150d7109e5f7ab36744a5b7_auth_user.table'}>, 15)"
p234
ssg111
I1256
sg112
(dp235
I1251
S'                        colset[fieldname] = value'
p236
sI1252
S'                else:'
p237
sI1253
S'                    colset[fieldname] = value'
p238
sI1254
S"                if field_type == 'id':"
p239
sI1255
S'                    id = colset[field.name]'
p240
sI1256
S'                    colset.update_record = lambda _ = (colset, table, id), **a: update_record(_, a)'
p241
sI1257
S'                    colset.delete_record = lambda t = table, i = id: t._db(t._id==i).delete()'
p242
sI1258
S'                    for (referee_table, referee_name) in \\'
p243
sI1259
S'                            table._referenced_by:'
p244
sI1260
S'                        s = db[referee_table][referee_name]'
p245
ssg123
S"(_=(<Row {'auth_event': <gluon.dal.Set object at 0x9..._wiki_tag': <gluon.dal.Set object at 0x98b836c>}>, <Table {'first_name': <gluon.dal.Field object at...b669d15150d7109e5f7ab36744a5b7_auth_user.table'}>, 15), **a={'reset_password_key': '1297360135-8c39b8bc-65cc-498e-b048-48427942569e'})"
p246
sg125
g158
sa(dp247
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p248
sg105
(dp249
S'c'
g20
sS'table._id'
p250
S'<gluon.dal.Field object>'
p251
sS'table._db'
p252
S"<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0x96f270c>}>}>"
p253
sS').update'
p254
g145
sS'table'
p255
S"<Table {'first_name': <gluon.dal.Field object at...b669d15150d7109e5f7ab36744a5b7_auth_user.table'}>"
p256
sS'id'
p257
S'15'
p258
ssg111
I4557
sg112
(dp259
I4552
S'def update_record(pack, a={}):'
p260
sI4553
S'    (colset, table, id) = pack'
p261
sI4554
S'    b = a or dict(colset)'
p262
sI4555
S'    c = dict([(k,v) for (k,v) in b.items() \\'
p263
sI4556
S"                  if k in table.fields and not k=='id'])"
p264
sI4557
S'    table._db(table._id==id).update(**c)'
p265
sI4558
S'    for (k, v) in c.items():'
p266
sI4559
S'        colset[k] = v'
p267
sI4560
S''
sI4561
S''
ssg123
S"(pack=(<Row {'auth_event': <gluon.dal.Set object at 0x9..._wiki_tag': <gluon.dal.Set object at 0x98b836c>}>, <Table {'first_name': <gluon.dal.Field object at...b669d15150d7109e5f7ab36744a5b7_auth_user.table'}>, 15), a={'reset_password_key': '1297360135-8c39b8bc-65cc-498e-b048-48427942569e'})"
p268
sg125
S'update_record'
p269
sa(dp270
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p271
sg105
(dp272
S'self.query'
p273
S'<gluon.dal.Query object>'
p274
sS'fields'
p275
S'[]'
p276
sS'self'
p277
S'<gluon.dal.Set object>'
p278
sS'tablename'
p279
S"'auth_user'"
p280
sS'self.db._adapter.update'
p281
S'<bound method SQLiteAdapter.update of <gluon.dal.SQLiteAdapter object>>'
p282
sS'self.db._adapter'
p283
S'<gluon.dal.SQLiteAdapter object>'
p284
sS'self.db'
p285
S"<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0x96f270c>}>}>"
p286
ssg111
I4518
sg112
(dp287
I4513
S''
sI4514
S'    def update(self, **update_fields):'
p288
sI4515
S'        tablename = self.db._adapter.get_table(self.query)'
p289
sI4516
S'        fields = self.db[tablename]._listify(update_fields,update=True)'
p290
sI4517
S'        self.delete_uploaded_files(update_fields)'
p291
sI4518
S'        return self.db._adapter.update(tablename,self.query,fields)'
p292
sI4519
S''
sI4520
S'    def delete_uploaded_files(self, upload_fields=None):'
p293
sI4521
S'        table = self.db[self.db._adapter.tables(self.query)[0]]'
p294
sI4522
S'        # ## mind uploadfield==True means file is not in DB'
p295
ssg123
S'(self=<gluon.dal.Set object>, **update_fields={})'
p296
sg125
S'update'
p297
sa(dp298
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p299
sg105
(dp300
S'self'
p301
S'<gluon.dal.SQLiteAdapter object>'
p302
sS'self.execute'
p303
S'<bound method SQLiteAdapter.execute of <gluon.dal.SQLiteAdapter object>>'
p304
sS'sql'
p305
S"'UPDATE auth_user SET  WHERE (auth_user.id = 15);'"
p306
ssg111
I854
sg112
(dp307
I849
S"        sql_v = ','.join(['%s=%s' % (field.name, self.expand(value,field.type)) for (field,value) in fields])"
p308
sI850
S"        return 'UPDATE %s SET %s%s;' % (tablename, sql_v, sql_w)"
p309
sI851
S''
sI852
S'    def update(self,tablename,query,fields):'
p310
sI853
S'        sql = self._update(tablename,query,fields)'
p311
sI854
S'        self.execute(sql)'
p312
sI855
S'        try:'
p313
sI856
S'            return self.cursor.rowcount'
p314
sI857
S'        except:'
p315
sI858
S'            return None'
p316
ssg123
S"(self=<gluon.dal.SQLiteAdapter object>, tablename='auth_user', query=<gluon.dal.Query object>, fields=[])"
p317
sg125
g297
sa(dp318
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p319
sg105
(dp320
S'a'
S"('UPDATE auth_user SET  WHERE (auth_user.id = 15);',)"
p321
sS'self'
p322
S'<gluon.dal.SQLiteAdapter object>'
p323
sS'b'
g20
sS'self.log_execute'
p324
S'<bound method SQLiteAdapter.log_execute of <gluon.dal.SQLiteAdapter object>>'
p325
ssg111
I1067
sg112
(dp326
I1062
S'    def log_execute(self,*a,**b):'
p327
sI1063
S'        self.db._lastsql = a[0]'
p328
sI1064
S'        return self.cursor.execute(*a,**b)'
p329
sI1065
S''
sI1066
S'    def execute(self,*a,**b):'
p330
sI1067
S'        return self.log_execute(*a, **b)'
p331
sI1068
S''
sI1069
S'    def represent(self, obj, fieldtype):'
p332
sI1070
S'        if type(obj) in (types.LambdaType, types.FunctionType):'
p333
sI1071
S'            obj = obj()'
p334
ssg123
S"(self=<gluon.dal.SQLiteAdapter object>, *a=('UPDATE auth_user SET  WHERE (auth_user.id = 15);',), **b={})"
p335
sg125
S'execute'
p336
sa(dp337
g103
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p338
sg105
(dp339
S'a'
S"('UPDATE auth_user SET  WHERE (auth_user.id = 15);',)"
p340
sS'self.cursor'
p341
S'<pysqlite2.dbapi2.Cursor object>'
p342
sS'self'
p343
S'<gluon.dal.SQLiteAdapter object>'
p344
sS'b'
g20
sS'self.cursor.execute'
p345
S'<built-in method execute of pysqlite2.dbapi2.Cursor object>'
p346
ssg111
I1064
sg112
(dp347
I1059
S'    def create_sequence_and_triggers(self, query, table, **args):'
p348
sI1060
S'        self.execute(query)'
p349
sI1061
S''
sI1062
S'    def log_execute(self,*a,**b):'
p350
sI1063
S'        self.db._lastsql = a[0]'
p351
sI1064
S'        return self.cursor.execute(*a,**b)'
p352
sI1065
S''
sI1066
S'    def execute(self,*a,**b):'
p353
sI1067
S'        return self.log_execute(*a, **b)'
p354
sI1068
S''
ssg123
S"(self=<gluon.dal.SQLiteAdapter object>, *a=('UPDATE auth_user SET  WHERE (auth_user.id = 15);',), **b={})"
p355
sg125
S'log_execute'
p356
sasS'pyver'
p357
S'Python 2.6.5: /usr/bin/python'
p358
sS'session'
p359
(dp360
S'flash'
p361
S"'Email sent'"
p362
sS'_formkey[login]'
p363
S"'ff5a7777-f5f6-43b5-ae8c-d2d15d4ba9a9'"
p364
sS'auth'
p365
S'None'
p366
sS'_formkey[reset_password]'
p367
S"'8647b709-4c0f-4be2-b001-124c9b66853d'"
p368
ssS'etype'
p369
S"<class 'pysqlite2.dbapi2.OperationalError'>"
p370
sS'date'
p371
S'Thu Feb 10 23:19:26 2011'
p372
sS'response'
p373
(dp374
S'status'
p375
S'200'
p376
sg63
S'<cStringIO.StringO object>'
p377
sg80
S"<SimpleCookie: session_id_Music_Library='127.0.0.1-4571de22-0e9b-41bf-ac82-6d641ddcaae1'>"
p378
sS'_vars'
p379
S'None'
p380
sS'title'
p381
S"'Music_Library'"
p382
sS'session_file'
p383
S"<open file '/home/aakarshit/Desktop/python/web2p...571de22-0e9b-41bf-ac82-6d641ddcaae1', mode 'rb+'>"
p384
sg361
S"''"
p385
sS'_custom_rollback'
p386
S'None'
p387
sS'session_id'
p388
S"'127.0.0.1-4571de22-0e9b-41bf-ac82-6d641ddcaae1'"
p389
sS'headers'
p390
S"<Storage {'Expires': 'Thu, 10 Feb 2011 17:48:55 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p391
sS'meta'
p392
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p393
sS'session_filename'
p394
S"'/home/aakarshit/Desktop/python/web2py/applicatio...ns/127.0.0.1-4571de22-0e9b-41bf-ac82-6d641ddcaae1'"
p395
sS'postprocessing'
p396
S'[]'
p397
sS'menu'
p398
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), (<lazyT 'Edit'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>)])]"
p399
sS'_view_environment'
p400
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p401
sS'subtitle'
p402
S"<lazyT 'customize me!'>"
p403
sS'session_id_name'
p404
S"'session_id_Music_Library'"
p405
sS'_custom_commit'
p406
S'None'
p407
sS'_caller'
p408
S'<function <lambda>>'
p409
sS'files'
p410
S'[<gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>]'
p411
sS'view'
p412
S"'default/user.html'"
p413
ssS'locals'
p414
(dp415
S'a'
S"('UPDATE auth_user SET  WHERE (auth_user.id = 15);',)"
p416
sS'self'
p417
S'<gluon.dal.SQLiteAdapter object>'
p418
sS'b'
g20
sssS'traceback'
p419
S'Traceback (most recent call last):\n  File "/home/aakarshit/Desktop/python/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 670, in <module>\n  File "/home/aakarshit/Desktop/python/web2py/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 61, in user\n    return dict(form=auth(),down=down,recent=recent)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/tools.py", line 1044, in __call__\n    return self.request_reset_password()\n  File "/home/aakarshit/Desktop/python/web2py/gluon/tools.py", line 2014, in request_reset_password\n    user.update_record(reset_password_key=reset_password_key)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 1256, in <lambda>\n    colset.update_record = lambda _ = (colset, table, id), **a: update_record(_, a)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 4557, in update_record\n    table._db(table._id==id).update(**c)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 4518, in update\n    return self.db._adapter.update(tablename,self.query,fields)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 854, in update\n    self.execute(sql)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 1067, in execute\n    return self.log_execute(*a, **b)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 1064, in log_execute\n    return self.cursor.execute(*a,**b)\nOperationalError: near "WHERE": syntax error\n'
p420
s.