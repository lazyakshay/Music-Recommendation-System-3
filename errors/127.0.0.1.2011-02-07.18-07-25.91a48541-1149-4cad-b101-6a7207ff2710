(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n#default homepage redirected to home\nauth.settings.create_user_groups = False\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalizatioREADMEn operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(r=request,f=\'home\'))\n    return dict(message=T(\'Hello World\'))\n\n#function for user login/logout\ndef user():\n        \n    if request.args(0)==\'logout\':\n        ip=0;\n        down=0;\n        for i in db(db.ip_add.ip==str(request.env.remote_addr)).select():\n            ip=i.id\n            down=i.hits+1   \n        if ip:  db(db.ip_add.id==ip).update(hits=down,last=request.now,port=request.env.remote_port)\n        else:  db.ip_add.insert(ip=str(request.env.remote_addr),hits=0,last=request.now,port=request.env.remote_port)\n        session.clear()     #if requestfor logout clear the session\n        redirect(URL(r=request,f=\'user\',args=\'login\'))#redirect to login page\n    \n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))         #contains details of top download\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))       #contains details of recently uploaded files\n    return dict(form=auth(),down=down,recent=recent)\n\n#the logout function\ndef logout():\n    session.clear()\n    redirect(URL(r=request,f=\'index\'))\n    return \n\n\n#the page to register\ndef register():\n    session.clear()\n    form=SQLFORM(db.auth_user)\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        \n    if form.accepts(request.vars,session):\n            redirect(URL(r=request,f=\'user\',args=\'login\'))#if registeration is sucessful  redirct to homepage\n            \n    return dict(form=form,down=down,recent=recent)\n\n#default function to download the filea in database\n@auth.requires_login()\ndef download():\n     \n    if(request.vars.has_key(\'songid\')):  #if it is called to download the no of download of that song is increased by one\n        rat1=db(db.plugin_rating_master.id>0).select()\n        rat=3.0\n        for i in rat1:\n            rat=i.rating\n        so=int(request.vars[\'songid\'])\n        curr=db(db.song.id==so).select()\n        down=0\n        rat1=3.0\n        for i in curr:\n             down=int(i.nod)+1\n             rat1=i.rating\n        rat=((rat1*(down-1))+rat)/down\n        db(db.song.id==so).update(nod=down,rating=rat)\n        \n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n#controller for homepage\n\n#@auth.requires_membership(\'administration\')\n\n\n@auth.requires_login()\ndef home():\n    admin=0\n       \n    if (session.auth.user.admin_priv == True) & (auth.has_membership(\'Secret Agent\', session.auth.user.id)) == False:\n        auth.add_membership(\'Secret Agent\', session.auth.user.id)\n        print 1\n        \n    if (session.auth.user.admin_priv == False) & (auth.has_membership(\'Secret Agent\', session.auth.user.id)) == True:\n        auth.del_membership(\'Secret Agent\', session.auth.user.id) \n        print 2       \n        \n    \n    if(auth.has_membership(\'adminstration\')):admin=1\n        \n    form = SQLFORM.factory(\n            Field(\'Search\'),\n            Field(\'type\',\'boolean\', requires=IS_IN_SET([\'All\',\'Artist\',\'Album\',\'Titles\']),widget=SQLFORM.widgets.radio.widget,default=\'All\'))\n    g=[]\n     \n    if session.string==None:\n          session.string=" "\n          session.type1="All"\n    string=session.string\n    type1=session.type1\n    pageno=0\n    next=0\n    pre=0\n    no=15\n        \n        \n    if request.vars.has_key(\'pageno\'):\n          pageno=int(request.vars[\'pageno\'])\n          no=pageno*15+15\n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'Search\']\n          session.type1=request.vars[\'type\']\n          redirect(URL(r=request,f=\'home\'))\n    elif form.errors:\n          response.flash = \'form has errors\'\n       \n    g=process_search(string,type1)\n    count=len(g)\n       \n    found=""\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    tmp=db(db.song.id>0).select()\n    if(g):\n          found=tmp.find(lambda x: x.id in g)\n    else: response.flash=\'no song found\'\n             \n    if pageno>0:\n          pre=1\n    if no <count:\n          next=1\n    session.string=string\n    session.type1=type1 \n    return dict(admin=admin,form=form,found=found,pageno=pageno,pre=pre,next=next,count=count,down=down,recent=recent)\n    \nimport os\n@auth.requires_membership(\'adminstration\')\ndef ips():\n    ip12=db(db.ip_add.id>0).select()\n    return dict(ip=ip12)\n    \nimport re\n#function that process the search string and returns the ids of mathched results\n@auth.requires_login()\ndef process_search(s1,p):\n    s=\'\\w*\\s*\\W*\'\n    reg=s\n    for i in s1.split():\n        reg=reg+i+s         #create a regular expression\n    l=[]\n    #search for the regx in database\n    for i in db(db.song.id>0).select(db.song.ALL):\n        tmp=i.id\n       \n        if((p==\'All\' or p==\'Album\')and (re.search(reg,i.album,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Titles\')and (re.search(reg,i.name,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Artist\')and (re.search(reg,i.artist,re.IGNORECASE))):\n           if(i.id not in l):l+=[i.id]   \n         \n    \n    return l\n \nimport os\n\n#controler for upload page\n@auth.requires_membership(\'Secret Agent\')\ndef upload():\n    up_form=SQLFORM(db.files)\n    bol =\'dskh\' \n \n    if up_form.accepts(request.vars,session):\n            response.flash=(T(\'file uploaded\'))\n            path = os.path.join(request.folder,\'uploads\',up_form.vars[\'file\'])\n            bol=get_info(path,up_form.vars[\'id\'])   #get the metadata of uploaded file\n            if(bol[\'done\']==True):\n                 bol=bol[\'m\']\n                 #insert the metadata in database\n                 db.song.insert(file=up_form.vars[\'id\'],name=bol[\'title\'][0],doup=request.now,lyrics=bol[\'lyrics\'],length=bol[\'length\'],btr=bol[\'bit_rate\'], artist=bol[\'artist\'][0], album=bol[\'album\'][0], year=int(bol[\'date\']),genere=bol[\'genere\'][0],user_id=session.auth.user.id,pic=bol[\'img\'])\n                         \n            else:db(db.file.id==up_form.vars[\'id\']).delete()#if there is error in extracting metadata delete the file\n    elif up_form.errors:\n           response.flash=(T(\'error occured\'))\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n    return dict(form=up_form,down=down,recent=recent,byme=byme)    \n\n\n#controller  for mymusic page\n@auth.requires_login()\ndef mymusic():\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))#contains details of recently  uploadded files\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n        \n        pageno=0\n        next=0\n        pre=0\n        no=15\n        n=15\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])\n            no=pageno*15+15                             #get the current page no\n        count=db(db.song.user_id==session.auth.user.id).count() #get the total no of entries\n         \n        if pageno > 0:\n            pre=1\n        if no < count:\n            next=1\n        else :\n            no-=15\n            n=count-no \n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(pageno*15,n))#contains details of top songs uploaded by user\n        return dict(pageno=pageno,pre=pre,next=next,down=down,recent=recent,byme=byme)\nimport os\n\n#controller forhandle playlist page\n@auth.requires_login()\ndef playlist():    \n        pageno=0\n        next=0\n        pre=0\n        no=11\n        n=11\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])      #get the current page no\n            if pageno < 0 : redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))\n            no=pageno*11+11\n        \n        byme=db(db.playlist.user==session.auth.user.id).select()#contains details of top songs uploaded by user\n        \n        iid=0  \n        \n          \n        li=[]\n        for i in byme:\n            li+=[i.id]\n        if len(li)>0: iid=li[0]\n        \n                \n        if request.vars.has_key(\'id\'):\n            iid=int(request.vars[\'id\'])    \n            \n        if len(li)>0 and iid not in li: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        \n        count=db(db.playlist.user==session.auth.user.id).count()#get the total no of entries\n        \n        if pageno*11 > count: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        elif pageno*11==count and pageno >0:redirect(URL(r=request,f=\'playlist\',c=\'default\',vars=dict(pageno=pageno-1)))#redirect to previouspage\n      \n        song=db((db.list.list==iid)&(db.list.song==db.song.id)&(db.song.file==db.files.id)).select()  #order by orders\n        pname=""\n        for i in db(db.playlist.id==iid).select():\n             pname=i.name\n        #create the playlist .xfps file\n        str1=\'\xef\xbb\xbf<?xml version="1.0" encoding="UTF-8" ?> \\n<playlist version="0" xmlns="http://xspf.org/ns/0/">\\n <title>\'\n        str2=\'\'\' \n         </title>\n         <trackList>\'\'\'\n        str3=\'\'\'<track>\n          <location>\'\'\'\n\n        str4=\'\'\'</location>\n            <image>\'\'\'\n        str5=\'\'\'</image>\n        <annotation>\'\'\'\n        str6=\'\'\'</annotation>\n            </track>\'\'\'\n        str7=\'\'\'</trackList>\n            </playlist>\'\'\'\n        if len(li)>0 :\n            plist=file(os.path.join(request.folder,\'static\',(\'tmp\'+\'.xspf\')),\'w\')\n            plist.write(str1)\n            plist.write(pname)\n            plist.write(str2)\n        \n            for i in song:\n               plist.write(str3)\n               plist.write(str(URL(r=request,f=\'download\',c=\'default\',args=i.files.file)))\n               plist.write(str4)\n               plist.write(str(URL(request.application,\'static\',i.song.pic)))\n               plist.write(str5)\n               plist.write(i.song.name)\n               plist.write(str6)\n               #response.flash=song\n            plist.write(str7)        \n            plist.close()\n            #the playlist is created\n            \n        if pageno>0:\n            pre=1\n        if no <count:\n            next=1\n        else :\n            no-=11\n            n=count-no\n            \n        form = SQLFORM.factory(Field(\'new\',\'string\',label="NEW PLAYLIST"))#form to insert new playlist\n            \n        if form.accepts(request.vars,session):\n            response.flash=\'New Playlist created\'\n            db.playlist.insert(user=session.auth.user.id,name=form.vars[\'new\'])\n            redirect(URL(r=request,f=\'playlist\',vars=dict(pageno=pageno)))\n        elif form.errors:\n                response.flash=\'error\'\n        \n                    \n        byme=db(db.playlist.user==session.auth.user.id).select(limitby=(pageno*11,n))#contains details of top songs uploaded by user\n        scr1=" " \n        if len(li)>0:   \n            scr1=URL(request.application,\'static\',\'tmp\'+\'.xspf\')\n        scr2=URL(request.application,\'static\',os.path.join(\'ply\',\'xspf_player.swf\'))\n            \n        ply=XML(\'<object type="application/x-shockwave-flash" width="650" height="600" data="%(scr2)s?playlist_url=%(scr1)s">  <param name="movie"  value="%(scr2)s?autoplay=1&autoload=1&playlist_url=%(scr1)s"/> <embed  allowfullscreen="false" allowscriptaccess="always" src="%(scr2)s?playlist_url=%(scr1)s pluginspage=\xe2\x80\x9dhttp://www.macromedia.com/go/getflashplayer\xe2\x80\x9d" ></embed> </object>\'%dict(scr1=scr1,scr2=scr2))#the XML lines for player\n       \n        \n            \n        return dict(form=form,ply=ply,pageno=pageno,pre=pre,next=next,byme=byme,pname=pname)\n    \n#the controller for play song page\n@auth.requires_login()\ndef play():\n    \n        so=int(request.args(0))\n        som1=db(db.song.id==so).select()\n        if (db(db.song.id==so).count())<=0:\n            redirect(URL(r=request,f=\'user\',args=\'logout\'))#call for logout if vars not in range\n        \n        soid=0\n        for i in som1:\n          soid=i.file\n          sopic=i.pic\n          sonam=i.name\n        som=db(db.files.id==soid).select()\n        filn=""\n        for i in som:\n            filn=i.file\n        #create form for comment\n        form = SQLFORM.factory(Field(\'comment\',\'text\'))\n        \n        db.list.song.default=so\n        db.list.song.readable=False\n        db.list.favourite.readable=False\n        db.list.listen.readable=False\n        db.list.orders.readable=False\n        db.list.song.writable=False\n        db.list.favourite.writable=False\n        db.list.listen.writable=False\n        db.list.orders.writable=False\n        \n        myplaylist=[]\n        idform=[]\n        for i in db((db.playlist.user==session.auth.user.id)).select():\n              myplaylist+=[i.name]\n              idform+=[i.id]\n        \n   \n        db.list.list.requires=IS_IN_SET(idform,myplaylist)\n        form1=SQLFORM(db.list)\n        response.flash=sonam\n        if form1.accepts(request.vars,session):\n            response.flash="SONG ADDED TO PLAYLIST"\n        if form.accepts(request.vars,session):\n            response.flash=\'comment added\'\n            db.comments.insert(user_id=session.auth.user.id,song_id=so,comment=form.vars[\'comment\'],date=request.now)\n            \n             \n        sopic=URL(request.application,\'static\',sopic)#the album art pic\n        pic=XML(\'<img src=%(sopic)s align="center"  width="240px" height="240"\\>\'% dict(sopic=sopic)) \n        src=URL(r=request,c=\'default\',f=\'download\',args=filn)\n        width=\'400\'\n        height=45\n        """\n        ## Embeds a media file (such as flash video or an mp3 file)\n        - ``src`` is the src of the video\n        - ``width`` is the width of the image\n        - ``height`` is the height of the image\n        """\n        #the music player\n        ply=XML(\'<embed allowfullscreen="false" allowscriptaccess="always" flashvars="height=%(height)s&width=%(width)s&file=%(src)s" height="%(height)spx" src="%(url)s" width="%(width)spx"></embed>\'%dict(url=URL(request.application,\'static\',\'plugin_wiki/mediaplayer.swf\'),src=src,width=width,height=height))\n        \n        #select the comment for the song\n        comm=db((db.comments.song_id==so) &( db.comments.user_id==db.auth_user.id)).select(db.auth_user.first_name,db.auth_user.last_name,db.comments.comment,db.comments.date,db.auth_user.pic,db.auth_user.id,db.comments.id,orderby=~db.comments.date,limitby=(0,10))\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15))\n        \n        return dict(ply=ply,down=down,recent=recent,byme=byme,comm=comm,form=form,pic=pic,som=som1,ffff=filn,form1=form1)   \n\n#contrller for the deleteplaylist function\n@auth.requires_login()        \ndef deletplaylist():\n    playl=int(request.vars[\'id\'])\n    pag=int(request.vars[\'pageno\'])\n    db(db.list.list==playl).delete()\n    db(db.playlist.id==playl).delete()\n    redirect(URL(r=request, f=\'playlist\',vars=dict(pageno=pag)))\n    return\n\n#contrller for the deletecomment function\n@auth.requires_login()\ndef deletcomment():\n    song=int(request.vars[\'song\'])\n    com=int(request.vars[\'com\'])\n    db(db.comments.id==com).delete()\n    redirect(URL(r=request, f=\'play\',args=song))\n    return        \n\n\n@auth.requires_membership(\'adminstration\')\ndef admins():\n    names=[]\n    ids=[]\n    for i in db(db.auth_user.id>0).select():\n              ids+=[i.id]\n              names+=[i.first_name+\' \'+i.last_name]\n    for i in db((db.auth_user.id==db.auth_membership.user_id)).select():\n           k=ids.index(i.auth_user.id)\n           del(ids[k])\n           del(names[k])\n      #  response.flash="Deleting Options"\n           form2 = SQLFORM.factory(\n            Field(\'user\',requires=IS_IN_SET(ids,names),label=\'Delete User\'))\n    son=db(db.song.id>0).select()\n    sonn=[]\n    sonid=[]\n    for i in son:\n        sonid+=[i.id]\n        sonn+=[i.name+\' artist: \'+i.artist]   \n    if request.vars.has_key(\'user\'):\n       #if form2.accepts(request.vars,session):\n       if not form2.errors:\n        db(db.comments.user_id==request.vars[\'user\']).delete()\n        for i in db(db.playlist.user==request.vars[\'user\']).select():\n            db(db.list.list==i.id).delete()\n        db(db.playlist.user==request.vars[\'user\']).delete()\n        db(db.auth_user.id==request.vars[\'user\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n       elif form2.errors: pass  \n    \n    form1 = SQLFORM.factory(\n            Field(\'song\',requires=IS_IN_SET(sonid,sonn),label=\'Delete Song\'))\n    \n    if form1.accepts(request.vars, session):\n           # response.flash="qefw"\n            \n        db(db.comments.song_id==request.vars[\'song\']).delete()\n        \n        art=db(db.song.id==request.vars[\'song\']).select()\n        artpic=""\n        for i in art:\n            artpic=os.path.join(request.folder,\'static\',i.pic)\n        try:\n            os.remove(artpic)\n        except OSError:\n             response.flash="error"\n        for i in db((db.song.id==request.vars[\'song\'])&(db.files.id==db.song.file)).select():\n            db(db.files.id==i.files.id).delete()\n        db(db.song.id==request.vars[\'song\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n        \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    return dict(down=down,recent=recent,form=form2,form1=form1)\n\n\n\n\n\nfrom mutagen.mp3 import MP3\nfrom mutagen.easyid3 import EasyID3\nimport mutagen.id3\nfrom mutagen.id3 import ID3, TIT2, TALB, TPE1, TPE2, COMM, USLT, TCOM, TCON\n\nfrom mutagen.id3 import ID3NoHeaderError\nfrom mutagen.mp3 import HeaderNotFoundError\n\n#function to extract metadata from MP3 file\n@auth.requires_login()\ndef get_info(f,filen): \n    filen=str(filen)\n   \n    m={}\n    try:\n        audio = MP3(f)\n    except HeaderNotFoundError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False) \n    try:\n       tagg = ID3(f)\n    except ID3NoHeaderError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False)\n   \n    ext=\'.img\'\n    flag=1\n    imgfilename=""\n    #lookfor albumart\n    for frame in tagg.getall("APIC"):\n                flag=2\n                if (frame.mime == "image/jpeg") or (frame.mime == "image/jpg"): ext = ".jpg"\n                if frame.mime == "image/png": ext = ".png"\n                if frame.mime == "image/gif": ext = ".gif"\n\n                filen=filen+ext\n                #storethe album art\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n             \n                myfile = file(imgfilename, \'w\')\n                myfile.write(frame.data)\n                myfile.close()\n    if(flag==1):\n                filen=filen+\'.jpg\'\n                imgfilename=str(URL(request.folder,\'static\',\'albumart.jpg\'))\n                ff=file(imgfilename,\'r\')\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n                myfile = file(imgfilename, \'w\')\n                myfile.write(ff.read())\n                myfile.close()\n                ff.close()\n    m={}            \n    m = dict(MP3(f, ID3=EasyID3))\n    l=tagg.getall(u"USLT")\n    m[\'lyrics\']=""\n    if(not(m.has_key(\'artist\'))):m[\'artist\']=[\'unknown\']\n    if(not(m.has_key(\'album\'))):m[\'album\']=[\'unknown\']\n    if(not(m.has_key(\'title\'))):m[\'title\']=[\'unknown\']\n    if(not(m.has_key(\'genere\'))):m[\'genere\']=[\'unknown\']  \n    if(not(m.has_key(\'date\'))):m[u\'date\']=[\'2014\']\n    m[\'date\']=m[\'date\'][0][:4]\n    for i in tagg.getall(u"USLT"):\n         m[\'lyrics\']=i.text\n         \n    m[\'length\']=audio.info.length\n    m[\'bit_rate\']=audio.info.bitrate/(1000)\n    m[\'img\']=filen\n    \n    return dict(m=m,done=True)\n\nresponse._vars=response._caller(home)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.ValueError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.ValueError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.ValueError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.ValueError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.ValueError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.ValueError object>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.ValueError object>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.ValueError object>"
p26
sS'__format__'
p27
S'<built-in method __format__ of exceptions.ValueError object>'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.ValueError object>"
p30
sS'__class__'
p31
S"<type 'exceptions.ValueError'>"
p32
sS'__unicode__'
p33
S'<built-in method __unicode__ of exceptions.ValueError object>'
p34
sS'__delattr__'
p35
S"<method-wrapper '__delattr__' of exceptions.ValueError object>"
p36
sS'__subclasshook__'
p37
S'<built-in method __subclasshook__ of type object>'
p38
sS'__repr__'
p39
S"<method-wrapper '__repr__' of exceptions.ValueError object>"
p40
sS'args'
p41
S'("invalid literal for int() with base 10: \'Secret Agent\'",)'
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.ValueError object>'
p46
sS'__doc__'
p47
S"'Inappropriate argument value (of correct type).'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.ValueError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"invalid literal for int() with base 10: 'Secret Agent'"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'home'"
p58
sS'body'
p59
S'<cStringIO.StringO object>'
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a...e', 'PATH_INFO': '/Music_Library/default/home'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S'<Storage {}>'
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sS'raw_extension'
p71
S'None'
p72
sg41
S'[]'
p73
sS'controller'
p74
S"'default'"
p75
sS'cookies'
p76
S"<SimpleCookie: session_id_AOE='127.0.0.1-abb8245...'127.0.0.1-6e7e6187-9c4d-4786-8889-a54ef8a0a5e1'>"
p77
sS'application'
p78
S"'Music_Library'"
p79
sS'ajax'
p80
S'False'
p81
sS'client'
p82
S"'127.0.0.1'"
p83
sS'env'
p84
S"<Storage {'wsgi_multithread': True, 'http_accept...64', 'path_info': '/Music_Library/default/home'}>"
p85
sS'raw_args'
p86
S'None'
p87
sS'get_vars'
p88
S'<Storage {}>'
p89
sS'folder'
p90
S"'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/'"
p91
sS'now'
p92
S'datetime.datetime(2011, 2, 7, 18, 7, 25, 624767)'
p93
sS'post_vars'
p94
S'<Storage {}>'
p95
ssS'frames'
p96
(lp97
(dp98
S'file'
p99
S'/home/aakarshit/Desktop/python/web2py/gluon/restricted.py'
p100
sS'dump'
p101
(dp102
S'environment'
p103
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}"
p104
sS'ccode'
p105
S'<code object <module> at 0x99a59f8, file "/home/...s/Music_Library/controllers/default.py", line 12>'
p106
ssS'lnum'
p107
I188
sS'lines'
p108
(dp109
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p110
sI183
S'        if type(code) == types.CodeType:'
p111
sI184
S'            ccode = code'
p112
sI185
S'        else:'
p113
sI186
S'            ccode = compile2(code,layer)'
p114
sI187
S''
sI188
S'        exec ccode in environment'
p115
sI189
S'    except HTTP:'
p116
sI190
S'        raise'
p117
sI191
S'    except Exception:'
p118
ssS'call'
p119
S"(code='# -*- coding: utf-8 -*- \\n\\n######################...one=True)\\n\\nresponse._vars=response._caller(home)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}, layer='/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py')"
p120
sS'func'
p121
S'restricted'
p122
sa(dp123
g99
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p124
sg101
(dp125
sg107
I582
sg108
(dp126
I576
S"    m['length']=audio.info.length"
p127
sI577
S"    m['bit_rate']=audio.info.bitrate/(1000)"
p128
sI578
S"    m['img']=filen"
p129
sI579
S''
sI580
S'    return dict(m=m,done=True)'
p130
sI571
S"    if(not(m.has_key('date'))):m[u'date']=['2014']"
p131
sI572
S"    m['date']=m['date'][0][:4]"
p132
sI573
S'    for i in tagg.getall(u"USLT"):'
p133
sI574
S"         m['lyrics']=i.text"
p134
sI575
S''
ssg119
S'()'
p135
sg121
S'<module>'
p136
sa(dp137
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/globals.py'
p138
sg101
(dp139
S'self'
p140
S'undefined'
p141
sS'f'
S'<function home>'
p142
ssg107
I95
sg108
(dp143
I96
S'        self._view_environment = None'
p144
sI97
S'        self._custom_commit = None'
p145
sI98
S'        self._custom_rollback = None'
p146
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p147
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p148
sI92
S'        self.menu = []            # used by the default view layout'
p149
sI93
S'        self.files = []           # used by web2py_ajax.html'
p150
sI94
S'        self._vars = None'
p151
sI95
S'        self._caller = lambda f: f()'
p152
ssg119
S'(f=<function home>)'
p153
sg121
S'<lambda>'
p154
sa(dp155
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/tools.py'
p156
sg101
(dp157
S'action'
p158
S'<function home>'
p159
sS'a'
S'()'
p160
sS'b'
g44
ssg107
I2297
sg108
(dp161
I2292
S'                    self.environment.session.flash = self.environment.response.flash'
p162
sI2293
S'                    return call_or_redirect(self.settings.on_failed_authentication,'
p163
sI2294
S'                                            self.settings.login_url + \\'
p164
sI2295
S"                                                '?_next='+urllib.quote(next)"
p165
sI2296
S'                                            )'
p166
sI2297
S'                return action(*a, **b)'
p167
sI2298
S'            f.__doc__ = action.__doc__'
p168
sI2299
S'            f.__name__ = action.__name__'
p169
sI2300
S'            f.__dict__.update(action.__dict__)'
p170
sI2301
S'            return f'
p171
ssg119
S'(*a=(), **b={})'
p172
sg121
S'f'
sa(dp173
g99
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p174
sg101
(dp175
S'global session'
p176
S"<Storage {'flash': None, 'auth': <Storage {'expi...login]': '3dd7cc4e-5697-41e4-8d41-5aeddd8c3921'}>"
p177
sS'session.auth.user.id'
p178
S'12'
p179
sS'session.auth'
p180
S"<Storage {'expiration': 3600, 'user': <Storage {...11, 2, 7, 18, 7, 25, 624767), 'remember': False}>"
p181
sS'global auth'
p182
S'<gluon.tools.Auth object>'
p183
sS'session.auth.user'
p184
S"<Storage {'first_name': 'Aakarshit', 'last_name'...c42864de6940', 'registration_key': '', 'id': 12}>"
p185
sS'auth.del_membership'
p186
S'<bound method Auth.del_membership of <gluon.tools.Auth object>>'
p187
ssg107
I123
sg108
(dp188
I118
S"    if (session.auth.user.admin_priv == True) & (auth.has_membership('Secret Agent', session.auth.user.id)) == False:"
p189
sI119
S"        auth.add_membership('Secret Agent', session.auth.user.id)"
p190
sI120
S'        print 1'
p191
sI121
S''
sI122
S"    if (session.auth.user.admin_priv == False) & (auth.has_membership('Secret Agent', session.auth.user.id)) == True:"
p192
sI123
S"        auth.del_membership('Secret Agent', session.auth.user.id)"
p193
sI124
S'        print 2'
p194
sI125
S''
sI126
S''
sI127
S"    if(auth.has_membership('adminstration')):admin=1"
p195
ssg119
S'()'
p196
sg121
S'home'
p197
sa(dp198
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/tools.py'
p199
sg101
(dp200
S'group_id'
p201
S"'Secret Agent'"
p202
sS').delete'
p203
g141
ssg107
I2490
sg108
(dp204
I2485
S'        if log:'
p205
sI2486
S'            self.log_event(log % dict(user_id=user_id,'
p206
sI2487
S'                                      group_id=group_id))'
p207
sI2488
S'        return self.db(membership.user_id'
p208
sI2489
S'                       == user_id)(membership.group_id'
p209
sI2490
S'                                   == group_id).delete()'
p210
sI2491
S''
sI2492
S'    def has_permission('
p211
sI2493
S'        self,'
p212
sI2494
S"        name='any',"
p213
ssg119
S"(self=<gluon.tools.Auth object>, group_id='Secret Agent', user_id=12, role=None)"
p214
sg121
S'del_membership'
p215
sa(dp216
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p217
sg101
(dp218
S'self.query'
p219
S'<gluon.dal.Query object>'
p220
sS'tablename'
p221
S"'auth_membership'"
p222
sS'self'
p223
S'<gluon.dal.Set object>'
p224
sS'self.db._adapter.delete'
p225
S'<bound method SQLiteAdapter.delete of <gluon.dal.SQLiteAdapter object>>'
p226
sS'self.db._adapter'
p227
S'<gluon.dal.SQLiteAdapter object>'
p228
sS'self.db'
p229
S"<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0x9c0f14c>}>}>"
p230
ssg107
I4512
sg108
(dp231
I4512
S'        return self.db._adapter.delete(tablename,self.query)'
p232
sI4513
S''
sI4514
S'    def update(self, **update_fields):'
p233
sI4515
S'        tablename = self.db._adapter.get_table(self.query)'
p234
sI4516
S'        fields = self.db[tablename]._listify(update_fields,update=True)'
p235
sI4507
S'        return self.db._adapter.select(self.query,fields,attributes)'
p236
sI4508
S''
sI4509
S'    def delete(self):'
p237
sI4510
S'        tablename=self.db._adapter.get_table(self.query)'
p238
sI4511
S'        self.delete_uploaded_files()'
p239
ssg119
S'(self=<gluon.dal.Set object>)'
p240
sg121
S'delete'
p241
sa(dp242
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p243
sg101
(dp244
S'query'
p245
S'<gluon.dal.Query object>'
p246
sS'self'
p247
S'<gluon.dal.SQLiteAdapter object>'
p248
sS'tablename'
p249
S"'auth_membership'"
p250
sS'self._delete'
p251
S'<bound method SQLiteAdapter._delete of <gluon.dal.SQLiteAdapter object>>'
p252
sS'sql'
p253
g141
ssg107
I868
sg108
(dp254
I864
S"            sql_w = ''"
p255
sI865
S"        return 'DELETE FROM %s%s;' % (tablename, sql_w)"
p256
sI866
S''
sI867
S'    def delete(self,tablename,query):'
p257
sI868
S'        sql = self._delete(tablename,query)'
p258
sI869
S'        ### special code to handle CASCADE in SQLite'
p259
sI870
S'        db = self.db'
p260
sI871
S'        table = db[tablename]'
p261
sI872
S"        if self.dbengine=='sqlite' and table._referenced_by:"
p262
sI863
S'        else:'
p263
ssg119
S"(self=<gluon.dal.SQLiteAdapter object>, tablename='auth_membership', query=<gluon.dal.Query object>)"
p264
sg121
g241
sa(dp265
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p266
sg101
(dp267
S'query'
p268
S'<gluon.dal.Query object>'
p269
sS'self'
p270
S'<gluon.dal.SQLiteAdapter object>'
p271
sS'sql_w'
p272
g141
sS'self.expand'
p273
S'<bound method SQLiteAdapter.expand of <gluon.dal.SQLiteAdapter object>>'
p274
ssg107
I862
sg108
(dp275
I864
S"            sql_w = ''"
p276
sI865
S"        return 'DELETE FROM %s%s;' % (tablename, sql_w)"
p277
sI866
S''
sI857
S'        except:'
p278
sI858
S'            return None'
p279
sI859
S''
sI860
S'    def _delete(self,tablename, query):'
p280
sI861
S'        if query:'
p281
sI862
S"            sql_w = ' WHERE ' + self.expand(query)"
p282
sI863
S'        else:'
p283
ssg119
S"(self=<gluon.dal.SQLiteAdapter object>, tablename='auth_membership', query=<gluon.dal.Query object>)"
p284
sg121
S'_delete'
p285
sa(dp286
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p287
sg101
(dp288
S'expression.op'
p289
S'<bound method SQLiteAdapter.AND of <gluon.dal.SQLiteAdapter object>>'
p290
sS'expression'
p291
S'<gluon.dal.Query object>'
p292
sS'expression.first'
p293
S'<gluon.dal.Query object>'
p294
sS'expression.second'
p295
S'<gluon.dal.Query object>'
p296
ssg107
I799
sg108
(dp297
I800
S'            elif not expression.first is None:'
p298
sI801
S'                return expression.op(expression.first)'
p299
sI802
S'            else:'
p300
sI803
S'                return expression.op()'
p301
sI794
S'    def expand(self,expression,field_type=None):'
p302
sI795
S'        if isinstance(expression,Field):'
p303
sI796
S'            return str(expression)'
p304
sI797
S'        elif isinstance(expression, (Expression, Query)):'
p305
sI798
S'            if not expression.second is None:'
p306
sI799
S'                return expression.op(expression.first, expression.second)'
p307
ssg119
S'(self=<gluon.dal.SQLiteAdapter object>, expression=<gluon.dal.Query object>, field_type=None)'
p308
sg121
S'expand'
p309
sa(dp310
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p311
sg101
(dp312
S'self'
p313
S'<gluon.dal.SQLiteAdapter object>'
p314
sS'first'
p315
S'<gluon.dal.Query object>'
p316
sS'second'
p317
S'<gluon.dal.Query object>'
p318
sS'self.expand'
p319
S'<bound method SQLiteAdapter.expand of <gluon.dal.SQLiteAdapter object>>'
p320
ssg107
I721
sg108
(dp321
I716
S''
sI717
S'    def NOT(self,first):'
p322
sI718
S"        return '(NOT %s)' % self.expand(first)"
p323
sI719
S''
sI720
S'    def AND(self,first,second):'
p324
sI721
S"        return '(%s AND %s)' % (self.expand(first),self.expand(second))"
p325
sI722
S''
sI723
S'    def OR(self,first,second):'
p326
sI724
S"        return '(%s OR %s)' % (self.expand(first),self.expand(second))"
p327
sI725
S''
ssg119
S'(self=<gluon.dal.SQLiteAdapter object>, first=<gluon.dal.Query object>, second=<gluon.dal.Query object>)'
p328
sg121
S'AND'
p329
sa(dp330
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p331
sg101
(dp332
S'expression.op'
p333
S'<bound method SQLiteAdapter.EQ of <gluon.dal.SQLiteAdapter object>>'
p334
sS'expression'
p335
S'<gluon.dal.Query object>'
p336
sS'expression.first'
p337
S'<gluon.dal.Field object>'
p338
sS'expression.second'
p339
S"'Secret Agent'"
p340
ssg107
I799
sg108
(dp341
I800
S'            elif not expression.first is None:'
p342
sI801
S'                return expression.op(expression.first)'
p343
sI802
S'            else:'
p344
sI803
S'                return expression.op()'
p345
sI794
S'    def expand(self,expression,field_type=None):'
p346
sI795
S'        if isinstance(expression,Field):'
p347
sI796
S'            return str(expression)'
p348
sI797
S'        elif isinstance(expression, (Expression, Query)):'
p349
sI798
S'            if not expression.second is None:'
p350
sI799
S'                return expression.op(expression.first, expression.second)'
p351
ssg119
S'(self=<gluon.dal.SQLiteAdapter object>, expression=<gluon.dal.Query object>, field_type=None)'
p352
sg121
g309
sa(dp353
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p354
sg101
(dp355
S'first.type'
p356
S"'reference auth_group'"
p357
sS'self'
p358
S'<gluon.dal.SQLiteAdapter object>'
p359
sS'first'
p360
S'<gluon.dal.Field object>'
p361
sS'second'
p362
S"'Secret Agent'"
p363
sS'self.expand'
p364
S'<bound method SQLiteAdapter.expand of <gluon.dal.SQLiteAdapter object>>'
p365
ssg107
I751
sg108
(dp366
I746
S"        return '(%s LIKE %s)' % (self.expand(first),self.expand(key,'string'))"
p367
sI747
S''
sI748
S'    def EQ(self,first,second=None):'
p368
sI749
S'        if second is None:'
p369
sI750
S"            return '(%s IS NULL)' % self.expand(first)"
p370
sI751
S"        return '(%s = %s)' % (self.expand(first),self.expand(second,first.type))"
p371
sI752
S''
sI753
S'    def NE(self,first,second=None):'
p372
sI754
S'        if second==None:'
p373
sI755
S"            return '(%s IS NOT NULL)' % self.expand(first)"
p374
ssg119
S"(self=<gluon.dal.SQLiteAdapter object>, first=<gluon.dal.Field object>, second='Secret Agent')"
p375
sg121
S'EQ'
p376
sa(dp377
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p378
sg101
(dp379
S'field_type'
p380
S"'reference auth_group'"
p381
sS'self'
p382
S'<gluon.dal.SQLiteAdapter object>'
p383
sS'expression'
p384
S"'Secret Agent'"
p385
sS'self.represent'
p386
S'<bound method SQLiteAdapter.represent of <gluon.dal.SQLiteAdapter object>>'
p387
ssg107
I805
sg108
(dp388
I800
S'            elif not expression.first is None:'
p389
sI801
S'                return expression.op(expression.first)'
p390
sI802
S'            else:'
p391
sI803
S'                return expression.op()'
p392
sI804
S'        elif field_type:'
p393
sI805
S'            return self.represent(expression,field_type)'
p394
sI806
S'        elif isinstance(expression,(list,tuple)):'
p395
sI807
S"            return ','.join([self.represent(item,field_type) for item in expression])"
p396
sI808
S'        else:'
p397
sI809
S'            return str(expression)'
p398
ssg119
S"(self=<gluon.dal.SQLiteAdapter object>, expression='Secret Agent', field_type='reference auth_group')"
p399
sg121
g309
sa(dp400
g99
S'/home/aakarshit/Desktop/python/web2py/gluon/dal.py'
p401
sg101
(dp402
S'builtinstr'
p403
S"<type 'str'>"
p404
sS'builtinint'
p405
S"<type 'int'>"
p406
sS'obj'
p407
S"'Secret Agent'"
p408
ssg107
I1104
sg108
(dp409
I1099
S"        elif fieldtype.startswith('reference'): # reference"
p410
sI1100
S"            if fieldtype.find('.')>0:"
p411
sI1101
S'                return repr(obj)'
p412
sI1102
S'            elif isinstance(obj, (Row, Reference)):'
p413
sI1103
S"                return str(obj['id'])"
p414
sI1104
S'            return str(int(obj))'
p415
sI1105
S"        elif fieldtype == 'double':"
p416
sI1106
S'            return repr(float(obj))'
p417
sI1107
S'        if isinstance(obj, unicode):'
p418
sI1108
S'            obj = obj.encode(self.db_codec)'
p419
ssg119
S"(self=<gluon.dal.SQLiteAdapter object>, obj='Secret Agent', fieldtype='reference auth_group')"
p420
sg121
S'represent'
p421
sasS'pyver'
p422
S'Python 2.6.5: /usr/bin/python'
p423
sS'session'
p424
(dp425
S'flash'
p426
S'None'
p427
sS'_formkey[login]'
p428
S"'3dd7cc4e-5697-41e4-8d41-5aeddd8c3921'"
p429
sS'auth'
p430
S"<Storage {'expiration': 3600, 'user': <Storage {...11, 2, 7, 18, 7, 25, 624767), 'remember': False}>"
p431
ssS'etype'
p432
S"<type 'exceptions.ValueError'>"
p433
sS'date'
p434
S'Mon Feb  7 18:07:25 2011'
p435
sS'response'
p436
(dp437
S'status'
p438
S'200'
p439
sg59
S'<cStringIO.StringO object>'
p440
sg76
S"<SimpleCookie: session_id_Music_Library='127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'>"
p441
sS'_vars'
p442
S'None'
p443
sS'title'
p444
S"'Music_Library'"
p445
sS'session_file'
p446
S"<open file '/home/aakarshit/Desktop/python/web2p...a95a450-b25c-436d-ba9b-788df6651212', mode 'rb+'>"
p447
sS'flash'
p448
S"''"
p449
sS'_custom_rollback'
p450
S'None'
p451
sS'session_id'
p452
S"'127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'"
p453
sS'headers'
p454
S"<Storage {'Expires': 'Mon, 07 Feb 2011 12:37:25 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p455
sS'meta'
p456
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p457
sS'session_filename'
p458
S"'/home/aakarshit/Desktop/python/web2py/applicatio...ns/127.0.0.1-4a95a450-b25c-436d-ba9b-788df6651212'"
p459
sS'postprocessing'
p460
S'[]'
p461
sS'menu'
p462
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), (<lazyT 'Edit'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>)])]"
p463
sS'_view_environment'
p464
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p465
sS'subtitle'
p466
S"<lazyT 'customize me!'>"
p467
sS'session_id_name'
p468
S"'session_id_Music_Library'"
p469
sS'_custom_commit'
p470
S'None'
p471
sS'_caller'
p472
S'<function <lambda>>'
p473
sS'files'
p474
S'[<gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>]'
p475
sS'view'
p476
S"'default/home.html'"
p477
ssS'locals'
p478
(dp479
S'self'
p480
S'<gluon.dal.SQLiteAdapter object>'
p481
sS'r'
S'None'
p482
sS'obj'
p483
S"'Secret Agent'"
p484
sS'fieldtype'
p485
S"'reference auth_group'"
p486
sssS'traceback'
p487
S'Traceback (most recent call last):\n  File "/home/aakarshit/Desktop/python/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 582, in <module>\n  File "/home/aakarshit/Desktop/python/web2py/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/aakarshit/Desktop/python/web2py/gluon/tools.py", line 2297, in f\n    return action(*a, **b)\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 123, in home\n    auth.del_membership(\'Secret Agent\', session.auth.user.id)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/tools.py", line 2490, in del_membership\n    == group_id).delete()\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 4512, in delete\n    return self.db._adapter.delete(tablename,self.query)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 868, in delete\n    sql = self._delete(tablename,query)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 862, in _delete\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 799, in expand\n    return expression.op(expression.first, expression.second)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 721, in AND\n    return \'(%s AND %s)\' % (self.expand(first),self.expand(second))\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 799, in expand\n    return expression.op(expression.first, expression.second)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 751, in EQ\n    return \'(%s = %s)\' % (self.expand(first),self.expand(second,first.type))\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 805, in expand\n    return self.represent(expression,field_type)\n  File "/home/aakarshit/Desktop/python/web2py/gluon/dal.py", line 1104, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'Secret Agent\'\n'
p488
s.