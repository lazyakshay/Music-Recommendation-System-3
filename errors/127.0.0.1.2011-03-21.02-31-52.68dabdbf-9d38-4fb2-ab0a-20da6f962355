(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n#default homepage redirected to home\nauth.settings.create_user_groups = False\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalizatioREADMEn operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    is_admin=0\n    if session.auth.user.admin_priv == True:\n        if auth.has_membership(\'Secret Agent\', session.auth.user.id) == False:\n            auth.add_membership(\'Secret Agent\', session.auth.user.id)            \n            \n    if session.auth.user.admin_priv == False:\n        if auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n            db(db.auth_membership.user_id == session.auth.user.id).delete()                       \n            \n    redirect(URL(r=request,f=\'home\'))\n    return dict(message=T(\'Hello World\'))\n\n#function for user login/logout\ndef user():\n        \n    if request.args(0)==\'logout\':\n        ip=0;\n        down=0;\n        for i in db(db.ip_add.ip==str(request.env.remote_addr)).select():\n            ip=i.id\n            down=i.hits+1   \n        if ip:  db(db.ip_add.id==ip).update(hits=down,last=request.now,port=request.env.remote_port)\n        else:  db.ip_add.insert(ip=str(request.env.remote_addr),hits=0,last=request.now,port=request.env.remote_port)\n        session.clear()     #if requestfor logout clear the session\n        redirect(URL(r=request,f=\'user\',args=\'login\'))#redirect to login page\n    \n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))         #contains details of top download\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))       #contains details of recently uploaded files\n    return dict(form=auth(),down=down,recent=recent)\n\n#the logout function\ndef logout():\n    session.clear()\n    redirect(URL(r=request,f=\'index\'))\n    return \n\n\n#the page to register\ndef register():\n    session.clear()\n    form=SQLFORM(db.auth_user)\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        \n    if form.accepts(request.vars,session):\n            redirect(URL(r=request,f=\'user\',args=\'login\'))#if registeration is sucessful  redirct to homepage\n            \n    return dict(form=form,down=down,recent=recent)\n\n#default function to download the file in database\n@auth.requires_login()\ndef download():\n     \n    if(request.vars.has_key(\'songid\')):  #if it is called to download the no of download of that song is increased by one\n        rat1=db(db.plugin_rating_master.id>0).select()\n        rat=3.0\n        for i in rat1:\n            rat=i.rating\n        so=int(request.vars[\'songid\'])\n        curr=db(db.song.id==so).select()\n        down=0\n        rat1=3.0\n        for i in curr:\n             down=int(i.nod)+1\n             rat1=i.rating\n        rat=((rat1*(down-1))+rat)/down\n        db(db.song.id==so).update(nod=down,rating=rat)\n        \n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n#controller for general homepage\n    \n@auth.requires_login()\ndef home():\n    admin=0\n                                                                     \n    if(auth.has_membership(\'adminstration\')):admin=1\n        \n    form = SQLFORM.factory(\n            Field(\'Search\'),\n            Field(\'type\',\'boolean\', requires=IS_IN_SET([\'All\',\'Artist\',\'Album\',\'Titles\']),widget=SQLFORM.widgets.radio.widget,default=\'All\'))\n    g=[]\n     \n    if session.string==None:\n          session.string=" "\n          session.type1="All"\n    string=session.string\n    type1=session.type1\n    pageno=0\n    next=0\n    pre=0\n    no=15\n        \n        \n    if request.vars.has_key(\'pageno\'):\n          pageno=int(request.vars[\'pageno\'])\n          no=pageno*15+15\n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'Search\']\n          session.type1=request.vars[\'type\']\n          redirect(URL(r=request,f=\'home\'))\n    elif form.errors:\n          response.flash = \'form has errors\'\n       \n    g=process_search(string,type1)\n    count=len(g)\n       \n    found=""\n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    tmp=db(db.song.id>0).select()\n    if(g):\n          found=tmp.find(lambda x: x.id in g)\n    else: response.flash=\'no song found\'\n             \n    if pageno>0:\n          pre=1\n    if no <count:\n          next=1\n    session.string=string\n    session.type1=type1 \n\n    newlink = []\n    newlabel = []\t\n\n    if  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \tnewlink.append(\'upload\')\n\tnewlabel.append(\'UPLOAD\')\n\n        newlink.append(\'mymusic\')\n\tnewlabel.append(\'MY SONGS\')\n\n    else:\n\tnewlink.append(\'request_upload\')\n\tnewlabel.append(\'REQUEST\')\n\n       \tnewlink.append(\'update_profile\')\n\tnewlabel.append(\'PROFILE\')\n\n    return dict(admin=admin,form=form,found=found,pageno=pageno,pre=pre,next=next,count=count,down=down,recent=recent, newlink = newlink, newlabel = newlabel)\n    \n    \nimport os\n@auth.requires_membership(\'adminstration\')\ndef ips():\n    ip12=db(db.ip_add.id>0).select()\n    return dict(ip=ip12)\n    \nimport re\n#function that process the search string and returns the ids of mathched results\n@auth.requires_login()\ndef process_search(s1,p):\n    s=\'\\w*\\s*\\W*\'\n    reg=s\n    for i in s1.split():\n        reg=reg+i+s         #create a regular expression\n    l=[]\n    #search for the regx in database\n    for i in db(db.song.id>0).select(db.song.ALL):\n        tmp=i.id\n       \n        if((p==\'All\' or p==\'Album\')and (re.search(reg,i.album,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Titles\')and (re.search(reg,i.name,re.IGNORECASE))):\n           if(i.id not in l):  l+=[i.id]\n        if((p==\'All\' or p==\'Artist\')and (re.search(reg,i.artist,re.IGNORECASE))):\n           if(i.id not in l):l+=[i.id]   \n         \n    \n    return l\n \nimport os\n\n#controler for upload page only for admin\n@auth.requires_membership(\'Secret Agent\')\ndef upload():\n    up_form=SQLFORM(db.files)\n    bol =\'dskh\' \n \n    if up_form.accepts(request.vars,session):\n            response.flash=(T(\'file uploaded\'))\n            path = os.path.join(request.folder,\'uploads\',up_form.vars[\'file\'])\n            bol=get_info(path,up_form.vars[\'id\'])   #get the metadata of uploaded file\n            if(bol[\'done\']==True):\n                 bol=bol[\'m\']\n                 #insert the metadata in database\n                 db.song.insert(file=up_form.vars[\'id\'],name=bol[\'title\'][0],doup=request.now,lyrics=bol[\'lyrics\'],length=bol[\'length\'],btr=bol[\'bit_rate\'], artist=bol[\'artist\'][0], album=bol[\'album\'][0], year=int(bol[\'date\']),genere=bol[\'genere\'][0],user_id=session.auth.user.id,pic=bol[\'img\'])\n                         \n            else:db(db.file.id==up_form.vars[\'id\']).delete()#if there is error in extracting metadata delete the file\n    elif up_form.errors:\n           response.flash=(T(\'error occured\'))\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n    return dict(form=up_form,down=down,recent=recent,byme=byme)    \n\n\n#controller  for mymusic page\n@auth.requires_login()\ndef mymusic():\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))#contains details of recently  uploadded files\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n        \n        pageno=0\n        next=0\n        pre=0\n        no=15\n        n=15\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])\n            no=pageno*15+15                             #get the current page no\n        count=db(db.song.user_id==session.auth.user.id).count() #get the total no of entries\n         \n        if pageno > 0:\n            pre=1\n        if no < count:\n            next=1\n        else :\n            no-=15\n            n=count-no \n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(pageno*15,n))#contains details of top songs uploaded by user\n\n        return dict(pageno=pageno,pre=pre,next=next,down=down,recent=recent,byme=byme)\n        \n\n#controller for requesting songs to be added only for genral users and not admin\n@auth.requires_login()\ndef request_upload(): \n\n    form = SQLFORM.factory(\n            Field(\'SongDetails\', \'text\')) \n \n    if form.accepts(request.vars, session):\n          session.string=request.vars[\'SongDetails\']\n\t  response.flash = \'Your request has been sent to the admin\'\n    \t  mail.send(to=[\'web2pymail@gmail.com\'], subject=\'Song request\', message=\'I want to request you to add the following song to the database:\\n\' + session.string + \'\\nMy email id is \' + session.auth.user.email)\t       \t  \n\n    elif form.errors:\n          response.flash = \'form has errors\'\n    \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n\n    return dict(form=form,down=down,recent=recent,byme=byme)\n    \n \n#controller for updating profile only for genral users and not admin\n@auth.requires_login()\ndef update_profile(): \n\n    var1 = session.auth.user.id\n    form = crud.update(db.auth_user, var1) \n       \t      \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10)) #contains details of recently  uploadded files\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4)) #contains details of recently uploaded files\n    byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15)) #contains details of top songs uploaded by user\n\n    return dict(form=form,down=down,recent=recent,byme=byme)\n\n      \nimport os\n\n#controller forhandle playlist page\n@auth.requires_login()\ndef playlist():    \n        pageno=0\n        next=0\n        pre=0\n        no=11\n        n=11\n        if request.vars.has_key(\'pageno\'):\n            pageno=int(request.vars[\'pageno\'])      #get the current page no\n            if pageno < 0 : redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))\n            no=pageno*11+11\n        \n        byme=db(db.playlist.user==session.auth.user.id).select()#contains details of top songs uploaded by user\n        \n        iid=0  \n        \n          \n        li=[]\n        for i in byme:\n            li+=[i.id]\n        if len(li)>0: iid=li[0]\n        \n                \n        if request.vars.has_key(\'id\'):\n            iid=int(request.vars[\'id\'])    \n            \n        if len(li)>0 and iid not in li: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        \n        count=db(db.playlist.user==session.auth.user.id).count()#get the total no of entries\n        \n        if pageno*11 > count: redirect(URL(r=request,f=\'user\',c=\'default\',args=\'logout\'))#if passed vars is not in range callfor logout\n        elif pageno*11==count and pageno >0:redirect(URL(r=request,f=\'playlist\',c=\'default\',vars=dict(pageno=pageno-1)))#redirect to previouspage\n      \n        song=db((db.list.list==iid)&(db.list.song==db.song.id)&(db.song.file==db.files.id)).select()  #order by orders\n        pname=""\n        for i in db(db.playlist.id==iid).select():\n             pname=i.name\n        #create the playlist .xfps file\n        str1=\'\xef\xbb\xbf<?xml version="1.0" encoding="UTF-8" ?> \\n<playlist version="0" xmlns="http://xspf.org/ns/0/">\\n <title>\'\n        str2=\'\'\' \n         </title>\n         <trackList>\'\'\'\n        str3=\'\'\'<track>\n          <location>\'\'\'\n\n        str4=\'\'\'</location>\n            <image>\'\'\'\n        str5=\'\'\'</image>\n        <annotation>\'\'\'\n        str6=\'\'\'</annotation>\n            </track>\'\'\'\n        str7=\'\'\'</trackList>\n            </playlist>\'\'\'\n        if len(li)>0 :\n            plist=file(os.path.join(request.folder,\'static\',(\'tmp\'+\'.xspf\')),\'w\')\n            plist.write(str1)\n            plist.write(pname)\n            plist.write(str2)\n        \n            for i in song:\n               plist.write(str3)\n               plist.write(str(URL(r=request,f=\'download\',c=\'default\',args=i.files.file)))\n               plist.write(str4)\n               plist.write(str(URL(request.application,\'static\',i.song.pic)))\n               plist.write(str5)\n               plist.write(i.song.name)\n               plist.write(str6)\n               #response.flash=song\n            plist.write(str7)        \n            plist.close()\n            #the playlist is created\n            \n        if pageno>0:\n            pre=1\n        if no <count:\n            next=1\n        else :\n            no-=11\n            n=count-no\n            \n        form = SQLFORM.factory(Field(\'new\',\'string\',label="NEW PLAYLIST"))#form to insert new playlist\n            \n        if form.accepts(request.vars,session):\n            response.flash=\'New Playlist created\'\n            db.playlist.insert(user=session.auth.user.id,name=form.vars[\'new\'])\n            redirect(URL(r=request,f=\'playlist\',vars=dict(pageno=pageno)))\n        elif form.errors:\n                response.flash=\'error\'\n        \n                    \n        byme=db(db.playlist.user==session.auth.user.id).select(limitby=(pageno*11,n))#contains details of top songs uploaded by user\n        scr1=" " \n        if len(li)>0:   \n            scr1=URL(request.application,\'static\',\'tmp\'+\'.xspf\')\n        scr2=URL(request.application,\'static\',os.path.join(\'ply\',\'xspf_player.swf\'))\n            \n        ply=XML(\'<object type="application/x-shockwave-flash" width="650" height="600" data="%(scr2)s?playlist_url=%(scr1)s">  <param name="movie"  value="%(scr2)s?autoplay=1&autoload=1&playlist_url=%(scr1)s"/> <embed  allowfullscreen="false" allowscriptaccess="always" src="%(scr2)s?playlist_url=%(scr1)s pluginspage=\xe2\x80\x9dhttp://www.macromedia.com/go/getflashplayer\xe2\x80\x9d" ></embed> </object>\'%dict(scr1=scr1,scr2=scr2))#the XML lines for player\n       \n        \n    \tnewlink = []\n\tnewlabel = []\t\n\n\tif  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \t\tnewlink.append(\'upload\')\n\t\tnewlabel.append(\'UPLOAD\')\n\n        \tnewlink.append(\'mymusic\')\n\t\tnewlabel.append(\'MY SONGS\')\n\n    \telse:\n\t\tnewlink.append(\'request_upload\')\n\t\tnewlabel.append(\'REQUEST\')\n\n       \t\tnewlink.append(\'update_profile\')\n\t\tnewlabel.append(\'PROFILE\')\n            \n        return dict(form=form,ply=ply,pageno=pageno,pre=pre,next=next,byme=byme,pname=pname, newlink=newlink, newlabel=newlabel)\n    \n#the controller for play song page\n@auth.requires_login()\ndef play():\n    \n        so=int(request.args(0))\n        som1=db(db.song.id==so).select()\n        if (db(db.song.id==so).count())<=0:\n            redirect(URL(r=request,f=\'user\',args=\'logout\'))#call for logout if vars not in range\n        \n        soid=0\n        for i in som1:\n          soid=i.file\n          sopic=i.pic\n          sonam=i.name\n        som=db(db.files.id==soid).select()\n        filn=""\n        for i in som:\n            filn=i.file\n        #create form for comment\n        form = SQLFORM.factory(Field(\'comment\',\'text\'))\n        \n        db.list.song.default=so\n        db.list.song.readable=False\n        db.list.favourite.readable=False\n        db.list.listen.readable=False\n        db.list.orders.readable=False\n        db.list.song.writable=False\n        db.list.favourite.writable=False\n        db.list.listen.writable=False\n        db.list.orders.writable=False\n        \n        myplaylist=[]\n        idform=[]\n        for i in db((db.playlist.user==session.auth.user.id)).select():\n              myplaylist+=[i.name]\n              idform+=[i.id]\n        \n   \n        db.list.list.requires=IS_IN_SET(idform,myplaylist)\n        form1=SQLFORM(db.list)\n        response.flash=sonam\n        if form1.accepts(request.vars,session):\n            response.flash="SONG ADDED TO PLAYLIST"\n        if form.accepts(request.vars,session):\n            response.flash=\'comment added\'\n            db.comments.insert(user_id=session.auth.user.id,song_id=so,comment=form.vars[\'comment\'],date=request.now)\n            \n             \n        sopic=URL(request.application,\'static\',sopic)#the album art pic\n        pic=XML(\'<img src=%(sopic)s align="center"  width="240px" height="240"\\>\'% dict(sopic=sopic)) \n        src=URL(r=request,c=\'default\',f=\'download\',args=filn)\n        width=\'400\'\n        height=45\n        """\n        ## Embeds a media file (such as flash video or an mp3 file)\n        - ``src`` is the src of the video\n        - ``width`` is the width of the image\n        - ``height`` is the height of the image\n        """\n        #the music player\n        ply=XML(\'<embed allowfullscreen="false" allowscriptaccess="always" flashvars="height=%(height)s&width=%(width)s&file=%(src)s" height="%(height)spx" src="%(url)s" width="%(width)spx"></embed>\'%dict(url=URL(request.application,\'static\',\'plugin_wiki/mediaplayer.swf\'),src=src,width=width,height=height))\n        \n        #select the comment for the song\n        comm=db((db.comments.song_id==so) &( db.comments.user_id==db.auth_user.id)).select(db.auth_user.first_name,db.auth_user.last_name,db.comments.comment,db.comments.date,db.auth_user.pic,db.auth_user.id,db.comments.id,orderby=~db.comments.date,limitby=(0,10))\n        down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n        recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n        byme=db(db.song.user_id==session.auth.user.id).select(orderby=~db.song.doup,limitby=(0,15))\n\treco=db((db.similarity.id>0) & (db.similarity.song1==session.song_id)).select(db.similarity.song2, orderby=~db.similarity.sim)\n\n    \tnewlink = []\n\tnewlabel = []\t\n\n\tif  auth.has_membership(\'Secret Agent\', session.auth.user.id) == True:\n    \t\tnewlink.append(\'upload\')\n\t\tnewlabel.append(\'UPLOAD\')\n\n        \tnewlink.append(\'mymusic\')\n\t\tnewlabel.append(\'MY SONGS\')\n\n    \telse:\n\t\tnewlink.append(\'request_upload\')\n\t\tnewlabel.append(\'REQUEST\')\n\n       \t\tnewlink.append(\'update_profile\')\n\t\tnewlabel.append(\'PROFILE\')\n        \n        return dict(ply=ply,down=down,recent=recent,byme=byme,comm=comm,form=form,pic=pic,som=som1,ffff=filn,form1=form1, newlink=newlink, newlabel=newlabel, reco=reco)   \n\n#contrller for the deleteplaylist function\n@auth.requires_login()        \ndef deletplaylist():\n    playl=int(request.vars[\'id\'])\n    pag=int(request.vars[\'pageno\'])\n    db(db.list.list==playl).delete()\n    db(db.playlist.id==playl).delete()\n    redirect(URL(r=request, f=\'playlist\',vars=dict(pageno=pag)))\n    return\n\n#contrller for the deletecomment function\n@auth.requires_login()\ndef deletcomment():\n    song=int(request.vars[\'song\'])\n    com=int(request.vars[\'com\'])\n    db(db.comments.id==com).delete()\n    redirect(URL(r=request, f=\'play\',args=song))\n    return        \n\n\n@auth.requires_membership(\'adminstration\')\ndef admins():\n    names=[]\n    ids=[]\n    for i in db(db.auth_user.id>0).select():\n              ids+=[i.id]\n              names+=[i.first_name+\' \'+i.last_name]\n    for i in db((db.auth_user.id==db.auth_membership.user_id)).select():\n           k=ids.index(i.auth_user.id)\n           del(ids[k])\n           del(names[k])\n      #  response.flash="Deleting Options"\n           form2 = SQLFORM.factory(\n            Field(\'user\',requires=IS_IN_SET(ids,names),label=\'Delete User\'))\n    son=db(db.song.id>0).select()\n    sonn=[]\n    sonid=[]\n    for i in son:\n        sonid+=[i.id]\n        sonn+=[i.name+\' artist: \'+i.artist]   \n    if request.vars.has_key(\'user\'):\n       #if form2.accepts(request.vars,session):\n       if not form2.errors:\n        db(db.comments.user_id==request.vars[\'user\']).delete()\n        for i in db(db.playlist.user==request.vars[\'user\']).select():\n            db(db.list.list==i.id).delete()\n        db(db.playlist.user==request.vars[\'user\']).delete()\n        db(db.auth_user.id==request.vars[\'user\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n       elif form2.errors: pass  \n    \n    form1 = SQLFORM.factory(\n            Field(\'song\',requires=IS_IN_SET(sonid,sonn),label=\'Delete Song\'))\n    \n    if form1.accepts(request.vars, session):\n           # response.flash="qefw"\n            \n        db(db.comments.song_id==request.vars[\'song\']).delete()\n        \n        art=db(db.song.id==request.vars[\'song\']).select()\n        artpic=""\n        for i in art:\n            artpic=os.path.join(request.folder,\'static\',i.pic)\n        try:\n            os.remove(artpic)\n        except OSError:\n             response.flash="error"\n        for i in db((db.song.id==request.vars[\'song\'])&(db.files.id==db.song.file)).select():\n            db(db.files.id==i.files.id).delete()\n        db(db.song.id==request.vars[\'song\']).delete()\n        redirect(URL(r=request,f=\'admins\'))\n        \n    down=db(db.song.id>0).select(orderby=~db.song.nod,limitby=(0,10))\n    recent=db(db.song.id>0).select(orderby=~db.song.doup,limitby=(0,4))\n    return dict(down=down,recent=recent,form=form2,form1=form1)\n\n\n\n\n\nfrom mutagen.mp3 import MP3\nfrom mutagen.easyid3 import EasyID3\nimport mutagen.id3\nfrom mutagen.id3 import ID3, TIT2, TALB, TPE1, TPE2, COMM, USLT, TCOM, TCON\n\nfrom mutagen.id3 import ID3NoHeaderError\nfrom mutagen.mp3 import HeaderNotFoundError\n\n#function to extract metadata from MP3 file\n@auth.requires_login()\ndef get_info(f,filen): \n    filen=str(filen)\n   \n    m={}\n    try:\n        audio = MP3(f)\n    except HeaderNotFoundError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False) \n    try:\n       tagg = ID3(f)\n    except ID3NoHeaderError:\n        response.flash="Error Reading file"\n        ##remove the entry\n        return dict(m=m,done=False)\n   \n    ext=\'.img\'\n    flag=1\n    imgfilename=""\n    #lookfor albumart\n    for frame in tagg.getall("APIC"):\n                flag=2\n                if (frame.mime == "image/jpeg") or (frame.mime == "image/jpg"): ext = ".jpg"\n                if frame.mime == "image/png": ext = ".png"\n                if frame.mime == "image/gif": ext = ".gif"\n\n                filen=filen+ext\n                #storethe album art\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n             \n                myfile = file(imgfilename, \'w\')\n                myfile.write(frame.data)\n                myfile.close()\n    if(flag==1):\n                filen=filen+\'.jpg\'\n                imgfilename=str(URL(request.folder,\'static\',\'albumart.jpg\'))\n                ff=file(imgfilename,\'r\')\n                imgfilename=os.path.join(request.folder,\'static\',filen)\n                myfile = file(imgfilename, \'w\')\n                myfile.write(ff.read())\n                myfile.close()\n                ff.close()\n    m={}            \n    m = dict(MP3(f, ID3=EasyID3))\n    l=tagg.getall(u"USLT")\n    m[\'lyrics\']=""\n    if(not(m.has_key(\'artist\'))):m[\'artist\']=[\'unknown\']\n    if(not(m.has_key(\'album\'))):m[\'album\']=[\'unknown\']\n    if(not(m.has_key(\'title\'))):m[\'title\']=[\'unknown\']\n    if(not(m.has_key(\'genere\'))):m[\'genere\']=[\'unknown\']  \n    if(not(m.has_key(\'date\'))):m[u\'date\']=[\'2014\']\n    m[\'date\']=m[\'date\'][0][:4]\n    for i in tagg.getall(u"USLT"):\n         m[\'lyrics\']=i.text\n         \n    m[\'length\']=audio.info.length\n    m[\'bit_rate\']=audio.info.bitrate/(1000)\n    m[\'img\']=filen\n    \n    return dict(m=m,done=True)\n\nfrom math import *\n@auth.requires_membership(\'Secret Agent\')    \ndef similarity(item, musicitem):\n    si = {}\n    f = open(\'/home/anirudh/Desktop/test4\', \'a\')\n    f.write(\'calculating similarity between\')\n    f.write(str(item)+\'and\'+str(musicitem)+\'\\n\')    \n    rateList1 = db((db.prefs.id>0) & (db.prefs.song_id==item)).select(db.prefs.user_id, db.prefs.rating)\n    rateList2 = db((db.prefs.id>0) & (db.prefs.song_id==musicitem)).select(db.prefs.user_id, db.prefs.rating)\n    sum1=0\n    sum2=0\n    n=0\n    sum1Sq=0\n    sum2Sq=0\n    pSum=0\n    for x in rateList1:\n    \tfor y in rateList2:\n    \t\tif x.user_id==y.user_id:\n    \t\t\tsum1 += x.rating\n    \t\t\tsum2 += y.rating\n    \t\t\tsum1Sq += pow(x.rating, 2)\n    \t\t\tsum2Sq += pow(y.rating, 2)\n    \t\t\tn += 1\n    \t\t\tf.write(str(n))\n\t\t\tpSum += x.rating * y.rating\n\t\t\t\n    if n==0: return 0    \n    num=pSum-(sum1*sum2/n)\n    den=sqrt((sum1Sq-pow(sum1,2)/n)*(sum2Sq-pow(sum2,2)/n))\n    if den==0: return 0  \n    r = num/den\n    db.similarity.insert(song1=item, song2=musicitem, sim=r)\n    return r\n\t\n@auth.requires_membership(\'Secret Agent\')\t\ndef topMatches(item):\n    f = open(\'/home/anirudh/Desktop/test2\', \'a\')\n    var1=str(item)\n    f.write(\'Topmatches for :\')\n    f.write(var1)\n    f.write(\'\\n\')\n    for musicitem in db(db.prefs.id>0).select(db.prefs.song_id,distinct=True):\n    \tif musicitem.song_id!=item:\n    \t\tvar = str(musicitem.song_id)\n    \t\tf.write(var)\n    \t\tf.write(\'  \')\n    \t\tvar3=similarity(item, musicitem.song_id)\n\t\tscores = [(musicitem.song_id, var3)]\n\t\tf.write(\'Similarity with :\')\n\t\tf.write(str(item))\n\t\tf.write(\' is :\')\n\t\tf.write(str(var3))\n\t\tf.write(\'\\n\')\n\t\t\t\n    f.write(\'\\n\')\t\t\n    scores.sort()\n    scores.reverse()\n    return scores[0:5]\n    \n@auth.requires_membership(\'Secret Agent\')    \ndef calcSimilarityItems():\n#Input from the database table prefs no need to pass as argument\n#for item based filtering find top matches for each song and construct a list<or store in database>\n    f = open(\'/home/anirudh/Desktop/test3\', \'w\')\n    f.write(\'hello calcSimilarityItems\\n\')\n    result = {}\n    i=0\n    for item in db(db.prefs.id>0).select(db.prefs.song_id,distinct=True):\n        var = str(item.song_id)\n        var2 = str(i)\n        f.write(var2)\n        f.write(\'  \')\n        f.write(var)\n        f.write(\'\\n\')\n        i+=1 \n    \tscores = topMatches( item.song_id )\n    \tresult[item.song_id] = scores\n    return result\n\nresponse._vars=response._caller(calcSimilarityItems)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.IOError object>"
p12
sS'__str__'
p13
S"<method-wrapper '__str__' of exceptions.IOError object>"
p14
sS'__reduce__'
p15
S'<built-in method __reduce__ of exceptions.IOError object>'
p16
sS'__dict__'
p17
S'{}'
p18
sS'__sizeof__'
p19
S'<built-in method __sizeof__ of exceptions.IOError object>'
p20
sS'__init__'
p21
S"<method-wrapper '__init__' of exceptions.IOError object>"
p22
sS'__setattr__'
p23
S"<method-wrapper '__setattr__' of exceptions.IOError object>"
p24
sS'__reduce_ex__'
p25
S'<built-in method __reduce_ex__ of exceptions.IOError object>'
p26
sS'__new__'
p27
S'<built-in method __new__ of type object>'
p28
sS'errno'
p29
S'2'
sS'__format__'
p30
S'<built-in method __format__ of exceptions.IOError object>'
p31
sS'__class__'
p32
S"<type 'exceptions.IOError'>"
p33
sS'filename'
p34
S"'/home/anirudh/Desktop/test3'"
p35
sS'__doc__'
p36
S"'I/O operation failed.'"
p37
sS'__getitem__'
p38
S"<method-wrapper '__getitem__' of exceptions.IOError object>"
p39
sS'__setstate__'
p40
S'<built-in method __setstate__ of exceptions.IOError object>'
p41
sS'__getattribute__'
p42
S"<method-wrapper '__getattribute__' of exceptions.IOError object>"
p43
sS'args'
p44
S"(2, 'No such file or directory')"
p45
sS'__subclasshook__'
p46
S'<built-in method __subclasshook__ of type object>'
p47
sS'__unicode__'
p48
S'<built-in method __unicode__ of exceptions.IOError object>'
p49
sS'strerror'
p50
S"'No such file or directory'"
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of exceptions.IOError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of exceptions.IOError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of exceptions.IOError object>"
p57
ssS'evalue'
p58
S"[Errno 2] No such file or directory: '/home/anirudh/Desktop/test3'"
p59
sS'request'
p60
(dp61
S'function'
p62
S"'calcSimilarityItems'"
p63
sS'body'
p64
S'<cStringIO.StringO object>'
p65
sS'wsgi'
p66
S"<Storage {'start_response': <function <lambda> a...: '/Music_Library/default/calcSimilarityItems'}}>"
p67
sS'extension'
p68
S"'html'"
p69
sS'vars'
p70
S'<Storage {}>'
p71
sS'cid'
p72
S'None'
p73
sS'url'
p74
S'<gluon.html.XML object>'
p75
sS'raw_extension'
p76
S'None'
p77
sg44
S'[]'
p78
sS'controller'
p79
S"'default'"
p80
sS'cookies'
p81
S"<SimpleCookie: session_id_Music_Library='127.0.0...'127.0.0.1-ce60ccfc-becd-45c5-93d1-84b07984e74b'>"
p82
sS'application'
p83
S"'Music_Library'"
p84
sS'ajax'
p85
S'False'
p86
sS'client'
p87
S"'127.0.0.1'"
p88
sS'env'
p89
S"<Storage {'wsgi_multithread': True, 'http_accept...': '/Music_Library/default/calcSimilarityItems'}>"
p90
sS'raw_args'
p91
S'None'
p92
sS'get_vars'
p93
S'<Storage {}>'
p94
sS'folder'
p95
S"'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/'"
p96
sS'now'
p97
S'datetime.datetime(2011, 3, 21, 2, 31, 52, 251845)'
p98
sS'post_vars'
p99
S'<Storage {}>'
p100
ssS'frames'
p101
(lp102
(dp103
S'file'
p104
S'/home/aakarshit/Desktop/python/web2py/gluon/restricted.py'
p105
sS'dump'
p106
(dp107
S'environment'
p108
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}"
p109
sS'ccode'
p110
S'<code object <module> at 0xa14f8d8, file "/home/...s/Music_Library/controllers/default.py", line 12>'
p111
ssS'lnum'
p112
I188
sS'lines'
p113
(dp114
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p115
sI183
S'        if type(code) == types.CodeType:'
p116
sI184
S'            ccode = code'
p117
sI185
S'        else:'
p118
sI186
S'            ccode = compile2(code,layer)'
p119
sI187
S''
sI188
S'        exec ccode in environment'
p120
sI189
S'    except HTTP:'
p121
sI190
S'        raise'
p122
sI191
S'    except Exception:'
p123
ssS'call'
p124
S"(code='# -*- coding: utf-8 -*- \\n\\n######################...onse._vars=response._caller(calcSimilarityItems)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'COMM': <class 'mutagen.id3.COMM'>, ...}, layer='/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py')"
p125
sS'func'
p126
S'restricted'
p127
sa(dp128
g104
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p129
sg106
(dp130
sg112
I750
sg113
(dp131
I739
S'        var = str(item.song_id)'
p132
sI740
S'        var2 = str(i)'
p133
sI741
S'        f.write(var2)'
p134
sI742
S"        f.write('  ')"
p135
sI743
S'        f.write(var)'
p136
sI744
S"        f.write('\\n')"
p137
sI745
S'        i+=1'
p138
sI746
S'    \tscores = topMatches( item.song_id )'
p139
sI747
S'    \tresult[item.song_id] = scores'
p140
sI748
S'    return result'
p141
ssg124
S'()'
p142
sg126
S'<module>'
p143
sa(dp144
g104
S'/home/aakarshit/Desktop/python/web2py/gluon/globals.py'
p145
sg106
(dp146
S'self'
p147
S'undefined'
p148
sS'f'
S'<function calcSimilarityItems>'
p149
ssg112
I95
sg113
(dp150
I96
S'        self._view_environment = None'
p151
sI97
S'        self._custom_commit = None'
p152
sI98
S'        self._custom_rollback = None'
p153
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p154
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p155
sI92
S'        self.menu = []            # used by the default view layout'
p156
sI93
S'        self.files = []           # used by web2py_ajax.html'
p157
sI94
S'        self._vars = None'
p158
sI95
S'        self._caller = lambda f: f()'
p159
ssg124
S'(f=<function calcSimilarityItems>)'
p160
sg126
S'<lambda>'
p161
sa(dp162
g104
S'/home/aakarshit/Desktop/python/web2py/gluon/tools.py'
p163
sg106
(dp164
S'action'
p165
S'<function calcSimilarityItems>'
p166
sS'a'
S'()'
p167
sS'b'
g18
ssg112
I2332
sg113
(dp168
I2336
S'            return f'
p169
sI2327
S'                                            )'
p170
sI2328
S'                if not self.has_membership(group_id=group_id, role=role):'
p171
sI2329
S'                    self.environment.session.flash = \\'
p172
sI2330
S'                        self.messages.access_denied'
p173
sI2331
S'                    return call_or_redirect(self.settings.on_failed_authorization)'
p174
sI2332
S'                return action(*a, **b)'
p175
sI2333
S'            f.__doc__ = action.__doc__'
p176
sI2334
S'            f.__name__ = action.__name__'
p177
sI2335
S'            f.__dict__.update(action.__dict__)'
p178
ssg124
S'(*a=(), **b={})'
p179
sg126
S'f'
sa(dp180
g104
S'/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py'
p181
sg106
(dp182
S'builtinopen'
p183
S'<built-in function open>'
p184
sS'f'
g148
ssg112
I734
sg113
(dp185
I736
S'    result = {}'
p186
sI737
S'    i=0'
p187
sI738
S'    for item in db(db.prefs.id>0).select(db.prefs.song_id,distinct=True):'
p188
sI729
S''
sI730
S"@auth.requires_membership('Secret Agent')"
p189
sI731
S'def calcSimilarityItems():'
p190
sI732
S'#Input from the database table prefs no need to pass as argument'
p191
sI733
S'#for item based filtering find top matches for each song and construct a list<or store in database>'
p192
sI734
S"    f = open('/home/anirudh/Desktop/test3', 'w')"
p193
sI735
S"    f.write('hello calcSimilarityItems\\n')"
p194
ssg124
S'()'
p195
sg126
S'calcSimilarityItems'
p196
sasS'pyver'
p197
S'Python 2.6.5: /usr/bin/python'
p198
sS'session'
p199
(dp200
S'_formkey[no_table_create]'
p201
S"'ee1e93c1-412a-4c7c-981c-f3e1d93cbafa'"
p202
sS'string'
p203
S"' '"
p204
sS'flash'
p205
S'None'
p206
sS'auth'
p207
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 3, 21, 2, 31, 52, 251845), 'remember': False}>"
p208
sS'_formkey[files_create]'
p209
S"'1397ffac-6041-4c45-9b57-9c965a7426bc'"
p210
sS'type1'
p211
S"'All'"
p212
sS'_formkey[login]'
p213
S"'60eef799-f8ad-4e5d-9f45-510d9cb31b0c'"
p214
ssS'etype'
p215
S"<type 'exceptions.IOError'>"
p216
sS'date'
p217
S'Mon Mar 21 02:31:52 2011'
p218
sS'response'
p219
(dp220
S'status'
p221
S'200'
p222
sg64
S'<cStringIO.StringO object>'
p223
sg81
S"<SimpleCookie: session_id_Music_Library='127.0.0.1-489b720b-a8a6-4f57-a6b2-92102a559327'>"
p224
sS'_vars'
p225
S'None'
p226
sS'title'
p227
S"'Music_Library'"
p228
sS'session_file'
p229
S"<open file '/home/aakarshit/Desktop/python/web2p...89b720b-a8a6-4f57-a6b2-92102a559327', mode 'rb+'>"
p230
sS'flash'
p231
S"''"
p232
sS'_custom_rollback'
p233
S'None'
p234
sS'session_id'
p235
S"'127.0.0.1-489b720b-a8a6-4f57-a6b2-92102a559327'"
p236
sS'headers'
p237
S"<Storage {'Expires': 'Sun, 20 Mar 2011 21:01:52 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p238
sS'meta'
p239
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p240
sS'session_filename'
p241
S"'/home/aakarshit/Desktop/python/web2py/applicatio...ns/127.0.0.1-489b720b-a8a6-4f57-a6b2-92102a559327'"
p242
sS'postprocessing'
p243
S'[]'
p244
sS'menu'
p245
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), (<lazyT 'Edit'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>)])]"
p246
sS'_view_environment'
p247
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p248
sS'subtitle'
p249
S"<lazyT 'customize me!'>"
p250
sS'session_id_name'
p251
S"'session_id_Music_Library'"
p252
sS'_custom_commit'
p253
S'None'
p254
sS'_caller'
p255
S'<function <lambda>>'
p256
sS'files'
p257
S'[<gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>, <gluon.html.XML object>]'
p258
sS'view'
p259
S"'default/calcSimilarityItems.html'"
p260
ssS'locals'
p261
(dp262
ssS'traceback'
p263
S'Traceback (most recent call last):\n  File "/home/aakarshit/Desktop/python/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 750, in <module>\n  File "/home/aakarshit/Desktop/python/web2py/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/aakarshit/Desktop/python/web2py/gluon/tools.py", line 2332, in f\n    return action(*a, **b)\n  File "/home/aakarshit/Desktop/python/web2py/applications/Music_Library/controllers/default.py", line 734, in calcSimilarityItems\n    f = open(\'/home/anirudh/Desktop/test3\', \'w\')\nIOError: [Errno 2] No such file or directory: \'/home/anirudh/Desktop/test3\'\n'
p264
s.